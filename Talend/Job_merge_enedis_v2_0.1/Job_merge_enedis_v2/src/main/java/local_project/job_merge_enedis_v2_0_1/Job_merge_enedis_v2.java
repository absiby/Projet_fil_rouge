// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package local_project.job_merge_enedis_v2_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Job_merge_enedis_v2 Purpose: Job_enedis<br>
 * Description: Job_enedis <br>
 * @author user@talend.com
 * @version 7.4.1.20200916_1624-M2
 * @status 
 */
public class Job_merge_enedis_v2 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Job_merge_enedis_v2";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Job_merge_enedis_v2.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Job_merge_enedis_v2.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tMongoDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMongoDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMongoDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputJSON_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplace_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMongoDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMongoDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputJSON_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tMongoDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMongoDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMongoDBConnection_1", false);
		start_Hash.put("tMongoDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tMongoDBConnection_1";

	
		int tos_count_tMongoDBConnection_1 = 0;
		

			java.util.logging.Logger.getLogger("org.mongodb.driver").setLevel(java.util.logging.Level.SEVERE);
    com.mongodb.MongoClientOptions clientOptions_tMongoDBConnection_1 = new com.mongodb.MongoClientOptions.Builder()

                    .build();

    // Empty client credentials list
    java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBConnection_1 = new java.util.ArrayList<com.mongodb.MongoCredential>();

        com.mongodb.ServerAddress serverAddress_tMongoDBConnection_1 = new com.mongodb.ServerAddress("localhost", 27017);
		com.mongodb.Mongo mongo_tMongoDBConnection_1 = new com.mongodb.MongoClient(serverAddress_tMongoDBConnection_1, mongoCredentialList_tMongoDBConnection_1, clientOptions_tMongoDBConnection_1);
        
    mongo_tMongoDBConnection_1.getAddress() ;
		com.mongodb.client.MongoDatabase db_tMongoDBConnection_1 = ((com.mongodb.MongoClient)mongo_tMongoDBConnection_1).getDatabase("DB_projet");
	
    
    globalMap.put("mongo_tMongoDBConnection_1", mongo_tMongoDBConnection_1);
    globalMap.put("db_tMongoDBConnection_1", db_tMongoDBConnection_1);

 



/**
 * [tMongoDBConnection_1 begin ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";

	

 


	tos_count_tMongoDBConnection_1++;

/**
 * [tMongoDBConnection_1 main ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";

	

 



/**
 * [tMongoDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";

	

 



/**
 * [tMongoDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";

	

 

ok_Hash.put("tMongoDBConnection_1", true);
end_Hash.put("tMongoDBConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tMongoDBInput_1Process(globalMap);



/**
 * [tMongoDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMongoDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";

	

 



/**
 * [tMongoDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class out_2Struct implements routines.system.IPersistableRow<out_2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];

	
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				
			    public Integer dd;

				public Integer getDd () {
					return this.dd;
				}
				
			    public Double ff;

				public Double getFf () {
					return this.ff;
				}
				
			    public Float hnuagen;

				public Float getHnuagen () {
					return this.hnuagen;
				}
				
			    public Double n;

				public Double getN () {
					return this.n;
				}
				
			    public Double per;

				public Double getPer () {
					return this.per;
				}
				
			    public Integer pmer;

				public Integer getPmer () {
					return this.pmer;
				}
				
			    public Float pres;

				public Float getPres () {
					return this.pres;
				}
				
			    public Double t;

				public Double getT () {
					return this.t;
				}
				
			    public Double td;

				public Double getTd () {
					return this.td;
				}
				
			    public Double tend;

				public Double getTend () {
					return this.tend;
				}
				
			    public Double tend24;

				public Double getTend24 () {
					return this.tend24;
				}
				
			    public Float tminsol;

				public Float getTminsol () {
					return this.tminsol;
				}
				
			    public Float tnn;

				public Float getTnn () {
					return this.tnn;
				}
				
			    public Float txn;

				public Float getTxn () {
					return this.txn;
				}
				
			    public Integer u;

				public Integer getU () {
					return this.u;
				}
				
			    public Double vv;

				public Double getVv () {
					return this.vv;
				}
				
			    public String code_reg;

				public String getCode_reg () {
					return this.code_reg;
				}
				
			    public Integer semaine_max_du_mois_0_1;

				public Integer getSemaine_max_du_mois_0_1 () {
					return this.semaine_max_du_mois_0_1;
				}
				
			    public String code_region;

				public String getCode_region () {
					return this.code_region;
				}
				
			    public java.util.Date horodate;

				public java.util.Date getHorodate () {
					return this.horodate;
				}
				
			    public String plage_de_puissance_souscrite;

				public String getPlage_de_puissance_souscrite () {
					return this.plage_de_puissance_souscrite;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public String profil;

				public String getProfil () {
					return this.profil;
				}
				
			    public Integer nb_points_soutirage;

				public Integer getNb_points_soutirage () {
					return this.nb_points_soutirage;
				}
				
			    public Float total_energie_soutiree_wh;

				public Float getTotal_energie_soutiree_wh () {
					return this.total_energie_soutiree_wh;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2) {

        	try {

        		int length = 0;
		
					this.date = readDate(dis);
					
						this.dd = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ff = null;
           				} else {
           			    	this.ff = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.hnuagen = null;
           				} else {
           			    	this.hnuagen = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.n = null;
           				} else {
           			    	this.n = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.per = null;
           				} else {
           			    	this.per = dis.readDouble();
           				}
					
						this.pmer = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pres = null;
           				} else {
           			    	this.pres = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.t = null;
           				} else {
           			    	this.t = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.td = null;
           				} else {
           			    	this.td = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tend = null;
           				} else {
           			    	this.tend = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tend24 = null;
           				} else {
           			    	this.tend24 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tminsol = null;
           				} else {
           			    	this.tminsol = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tnn = null;
           				} else {
           			    	this.tnn = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.txn = null;
           				} else {
           			    	this.txn = dis.readFloat();
           				}
					
						this.u = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.vv = null;
           				} else {
           			    	this.vv = dis.readDouble();
           				}
					
					this.code_reg = readString(dis);
					
						this.semaine_max_du_mois_0_1 = readInteger(dis);
					
					this.code_region = readString(dis);
					
					this.horodate = readDate(dis);
					
					this.plage_de_puissance_souscrite = readString(dis);
					
					this.region = readString(dis);
					
					this.profil = readString(dis);
					
						this.nb_points_soutirage = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.total_energie_soutiree_wh = null;
           				} else {
           			    	this.total_energie_soutiree_wh = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// Integer
				
						writeInteger(this.dd,dos);
					
					// Double
				
						if(this.ff == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ff);
		            	}
					
					// Float
				
						if(this.hnuagen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.hnuagen);
		            	}
					
					// Double
				
						if(this.n == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.n);
		            	}
					
					// Double
				
						if(this.per == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.per);
		            	}
					
					// Integer
				
						writeInteger(this.pmer,dos);
					
					// Float
				
						if(this.pres == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.pres);
		            	}
					
					// Double
				
						if(this.t == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.t);
		            	}
					
					// Double
				
						if(this.td == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.td);
		            	}
					
					// Double
				
						if(this.tend == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.tend);
		            	}
					
					// Double
				
						if(this.tend24 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.tend24);
		            	}
					
					// Float
				
						if(this.tminsol == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.tminsol);
		            	}
					
					// Float
				
						if(this.tnn == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.tnn);
		            	}
					
					// Float
				
						if(this.txn == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.txn);
		            	}
					
					// Integer
				
						writeInteger(this.u,dos);
					
					// Double
				
						if(this.vv == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.vv);
		            	}
					
					// String
				
						writeString(this.code_reg,dos);
					
					// Integer
				
						writeInteger(this.semaine_max_du_mois_0_1,dos);
					
					// String
				
						writeString(this.code_region,dos);
					
					// java.util.Date
				
						writeDate(this.horodate,dos);
					
					// String
				
						writeString(this.plage_de_puissance_souscrite,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// String
				
						writeString(this.profil,dos);
					
					// Integer
				
						writeInteger(this.nb_points_soutirage,dos);
					
					// Float
				
						if(this.total_energie_soutiree_wh == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.total_energie_soutiree_wh);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("date="+String.valueOf(date));
		sb.append(",dd="+String.valueOf(dd));
		sb.append(",ff="+String.valueOf(ff));
		sb.append(",hnuagen="+String.valueOf(hnuagen));
		sb.append(",n="+String.valueOf(n));
		sb.append(",per="+String.valueOf(per));
		sb.append(",pmer="+String.valueOf(pmer));
		sb.append(",pres="+String.valueOf(pres));
		sb.append(",t="+String.valueOf(t));
		sb.append(",td="+String.valueOf(td));
		sb.append(",tend="+String.valueOf(tend));
		sb.append(",tend24="+String.valueOf(tend24));
		sb.append(",tminsol="+String.valueOf(tminsol));
		sb.append(",tnn="+String.valueOf(tnn));
		sb.append(",txn="+String.valueOf(txn));
		sb.append(",u="+String.valueOf(u));
		sb.append(",vv="+String.valueOf(vv));
		sb.append(",code_reg="+code_reg);
		sb.append(",semaine_max_du_mois_0_1="+String.valueOf(semaine_max_du_mois_0_1));
		sb.append(",code_region="+code_region);
		sb.append(",horodate="+String.valueOf(horodate));
		sb.append(",plage_de_puissance_souscrite="+plage_de_puissance_souscrite);
		sb.append(",region="+region);
		sb.append(",profil="+profil);
		sb.append(",nb_points_soutirage="+String.valueOf(nb_points_soutirage));
		sb.append(",total_energie_soutiree_wh="+String.valueOf(total_energie_soutiree_wh));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];

	
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				
			    public Integer dd;

				public Integer getDd () {
					return this.dd;
				}
				
			    public Double ff;

				public Double getFf () {
					return this.ff;
				}
				
			    public Float hnuagen;

				public Float getHnuagen () {
					return this.hnuagen;
				}
				
			    public Double n;

				public Double getN () {
					return this.n;
				}
				
			    public Double per;

				public Double getPer () {
					return this.per;
				}
				
			    public Integer pmer;

				public Integer getPmer () {
					return this.pmer;
				}
				
			    public Float pres;

				public Float getPres () {
					return this.pres;
				}
				
			    public Double t;

				public Double getT () {
					return this.t;
				}
				
			    public Double td;

				public Double getTd () {
					return this.td;
				}
				
			    public Double tend;

				public Double getTend () {
					return this.tend;
				}
				
			    public Double tend24;

				public Double getTend24 () {
					return this.tend24;
				}
				
			    public Float tminsol;

				public Float getTminsol () {
					return this.tminsol;
				}
				
			    public Float tnn;

				public Float getTnn () {
					return this.tnn;
				}
				
			    public Float txn;

				public Float getTxn () {
					return this.txn;
				}
				
			    public Integer u;

				public Integer getU () {
					return this.u;
				}
				
			    public Double vv;

				public Double getVv () {
					return this.vv;
				}
				
			    public String code_reg;

				public String getCode_reg () {
					return this.code_reg;
				}
				
			    public String nom_reg;

				public String getNom_reg () {
					return this.nom_reg;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2) {

        	try {

        		int length = 0;
		
					this.date = readDate(dis);
					
						this.dd = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ff = null;
           				} else {
           			    	this.ff = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.hnuagen = null;
           				} else {
           			    	this.hnuagen = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.n = null;
           				} else {
           			    	this.n = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.per = null;
           				} else {
           			    	this.per = dis.readDouble();
           				}
					
						this.pmer = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pres = null;
           				} else {
           			    	this.pres = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.t = null;
           				} else {
           			    	this.t = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.td = null;
           				} else {
           			    	this.td = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tend = null;
           				} else {
           			    	this.tend = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tend24 = null;
           				} else {
           			    	this.tend24 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tminsol = null;
           				} else {
           			    	this.tminsol = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tnn = null;
           				} else {
           			    	this.tnn = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.txn = null;
           				} else {
           			    	this.txn = dis.readFloat();
           				}
					
						this.u = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.vv = null;
           				} else {
           			    	this.vv = dis.readDouble();
           				}
					
					this.code_reg = readString(dis);
					
					this.nom_reg = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// Integer
				
						writeInteger(this.dd,dos);
					
					// Double
				
						if(this.ff == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ff);
		            	}
					
					// Float
				
						if(this.hnuagen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.hnuagen);
		            	}
					
					// Double
				
						if(this.n == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.n);
		            	}
					
					// Double
				
						if(this.per == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.per);
		            	}
					
					// Integer
				
						writeInteger(this.pmer,dos);
					
					// Float
				
						if(this.pres == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.pres);
		            	}
					
					// Double
				
						if(this.t == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.t);
		            	}
					
					// Double
				
						if(this.td == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.td);
		            	}
					
					// Double
				
						if(this.tend == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.tend);
		            	}
					
					// Double
				
						if(this.tend24 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.tend24);
		            	}
					
					// Float
				
						if(this.tminsol == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.tminsol);
		            	}
					
					// Float
				
						if(this.tnn == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.tnn);
		            	}
					
					// Float
				
						if(this.txn == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.txn);
		            	}
					
					// Integer
				
						writeInteger(this.u,dos);
					
					// Double
				
						if(this.vv == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.vv);
		            	}
					
					// String
				
						writeString(this.code_reg,dos);
					
					// String
				
						writeString(this.nom_reg,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("date="+String.valueOf(date));
		sb.append(",dd="+String.valueOf(dd));
		sb.append(",ff="+String.valueOf(ff));
		sb.append(",hnuagen="+String.valueOf(hnuagen));
		sb.append(",n="+String.valueOf(n));
		sb.append(",per="+String.valueOf(per));
		sb.append(",pmer="+String.valueOf(pmer));
		sb.append(",pres="+String.valueOf(pres));
		sb.append(",t="+String.valueOf(t));
		sb.append(",td="+String.valueOf(td));
		sb.append(",tend="+String.valueOf(tend));
		sb.append(",tend24="+String.valueOf(tend24));
		sb.append(",tminsol="+String.valueOf(tminsol));
		sb.append(",tnn="+String.valueOf(tnn));
		sb.append(",txn="+String.valueOf(txn));
		sb.append(",u="+String.valueOf(u));
		sb.append(",vv="+String.valueOf(vv));
		sb.append(",code_reg="+code_reg);
		sb.append(",nom_reg="+nom_reg);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];

	
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				
			    public Integer dd;

				public Integer getDd () {
					return this.dd;
				}
				
			    public Double ff;

				public Double getFf () {
					return this.ff;
				}
				
			    public Float hnuagen;

				public Float getHnuagen () {
					return this.hnuagen;
				}
				
			    public Double n;

				public Double getN () {
					return this.n;
				}
				
			    public Double per;

				public Double getPer () {
					return this.per;
				}
				
			    public Integer pmer;

				public Integer getPmer () {
					return this.pmer;
				}
				
			    public Float pres;

				public Float getPres () {
					return this.pres;
				}
				
			    public Double t;

				public Double getT () {
					return this.t;
				}
				
			    public Double td;

				public Double getTd () {
					return this.td;
				}
				
			    public Double tend;

				public Double getTend () {
					return this.tend;
				}
				
			    public Double tend24;

				public Double getTend24 () {
					return this.tend24;
				}
				
			    public Float tminsol;

				public Float getTminsol () {
					return this.tminsol;
				}
				
			    public Float tnn;

				public Float getTnn () {
					return this.tnn;
				}
				
			    public Float txn;

				public Float getTxn () {
					return this.txn;
				}
				
			    public Integer u;

				public Integer getU () {
					return this.u;
				}
				
			    public Double vv;

				public Double getVv () {
					return this.vv;
				}
				
			    public String code_reg;

				public String getCode_reg () {
					return this.code_reg;
				}
				
			    public String nom_reg;

				public String getNom_reg () {
					return this.nom_reg;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2) {

        	try {

        		int length = 0;
		
					this.date = readDate(dis);
					
						this.dd = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ff = null;
           				} else {
           			    	this.ff = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.hnuagen = null;
           				} else {
           			    	this.hnuagen = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.n = null;
           				} else {
           			    	this.n = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.per = null;
           				} else {
           			    	this.per = dis.readDouble();
           				}
					
						this.pmer = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pres = null;
           				} else {
           			    	this.pres = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.t = null;
           				} else {
           			    	this.t = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.td = null;
           				} else {
           			    	this.td = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tend = null;
           				} else {
           			    	this.tend = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tend24 = null;
           				} else {
           			    	this.tend24 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tminsol = null;
           				} else {
           			    	this.tminsol = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tnn = null;
           				} else {
           			    	this.tnn = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.txn = null;
           				} else {
           			    	this.txn = dis.readFloat();
           				}
					
						this.u = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.vv = null;
           				} else {
           			    	this.vv = dis.readDouble();
           				}
					
					this.code_reg = readString(dis);
					
					this.nom_reg = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// Integer
				
						writeInteger(this.dd,dos);
					
					// Double
				
						if(this.ff == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ff);
		            	}
					
					// Float
				
						if(this.hnuagen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.hnuagen);
		            	}
					
					// Double
				
						if(this.n == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.n);
		            	}
					
					// Double
				
						if(this.per == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.per);
		            	}
					
					// Integer
				
						writeInteger(this.pmer,dos);
					
					// Float
				
						if(this.pres == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.pres);
		            	}
					
					// Double
				
						if(this.t == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.t);
		            	}
					
					// Double
				
						if(this.td == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.td);
		            	}
					
					// Double
				
						if(this.tend == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.tend);
		            	}
					
					// Double
				
						if(this.tend24 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.tend24);
		            	}
					
					// Float
				
						if(this.tminsol == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.tminsol);
		            	}
					
					// Float
				
						if(this.tnn == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.tnn);
		            	}
					
					// Float
				
						if(this.txn == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.txn);
		            	}
					
					// Integer
				
						writeInteger(this.u,dos);
					
					// Double
				
						if(this.vv == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.vv);
		            	}
					
					// String
				
						writeString(this.code_reg,dos);
					
					// String
				
						writeString(this.nom_reg,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("date="+String.valueOf(date));
		sb.append(",dd="+String.valueOf(dd));
		sb.append(",ff="+String.valueOf(ff));
		sb.append(",hnuagen="+String.valueOf(hnuagen));
		sb.append(",n="+String.valueOf(n));
		sb.append(",per="+String.valueOf(per));
		sb.append(",pmer="+String.valueOf(pmer));
		sb.append(",pres="+String.valueOf(pres));
		sb.append(",t="+String.valueOf(t));
		sb.append(",td="+String.valueOf(td));
		sb.append(",tend="+String.valueOf(tend));
		sb.append(",tend24="+String.valueOf(tend24));
		sb.append(",tminsol="+String.valueOf(tminsol));
		sb.append(",tnn="+String.valueOf(tnn));
		sb.append(",txn="+String.valueOf(txn));
		sb.append(",u="+String.valueOf(u));
		sb.append(",vv="+String.valueOf(vv));
		sb.append(",code_reg="+code_reg);
		sb.append(",nom_reg="+nom_reg);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String _id;

				public String get_id () {
					return this._id;
				}
				
			    public Integer numer_sta;

				public Integer getNumer_sta () {
					return this.numer_sta;
				}
				
			    public String cod_tend;

				public String getCod_tend () {
					return this.cod_tend;
				}
				
			    public String ctypen;

				public String getCtypen () {
					return this.ctypen;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				
			    public Integer dd;

				public Integer getDd () {
					return this.dd;
				}
				
			    public String etat_sol;

				public String getEtat_sol () {
					return this.etat_sol;
				}
				
			    public Double ff;

				public Double getFf () {
					return this.ff;
				}
				
			    public String hbas;

				public String getHbas () {
					return this.hbas;
				}
				
			    public Float hnuagen;

				public Float getHnuagen () {
					return this.hnuagen;
				}
				
			    public Double n;

				public Double getN () {
					return this.n;
				}
				
			    public String nbas;

				public String getNbas () {
					return this.nbas;
				}
				
			    public String nnuagen;

				public String getNnuagen () {
					return this.nnuagen;
				}
				
			    public Double per;

				public Double getPer () {
					return this.per;
				}
				
			    public Integer pmer;

				public Integer getPmer () {
					return this.pmer;
				}
				
			    public Float pres;

				public Float getPres () {
					return this.pres;
				}
				
			    public Double t;

				public Double getT () {
					return this.t;
				}
				
			    public Double td;

				public Double getTd () {
					return this.td;
				}
				
			    public Double tend;

				public Double getTend () {
					return this.tend;
				}
				
			    public Double tend24;

				public Double getTend24 () {
					return this.tend24;
				}
				
			    public Float tminsol;

				public Float getTminsol () {
					return this.tminsol;
				}
				
			    public Float tnn;

				public Float getTnn () {
					return this.tnn;
				}
				
			    public Float txn;

				public Float getTxn () {
					return this.txn;
				}
				
			    public Integer u;

				public Integer getU () {
					return this.u;
				}
				
			    public Double vv;

				public Double getVv () {
					return this.vv;
				}
				
			    public String code_dep;

				public String getCode_dep () {
					return this.code_dep;
				}
				
			    public String code_reg;

				public String getCode_reg () {
					return this.code_reg;
				}
				
			    public String nom_dept;

				public String getNom_dept () {
					return this.nom_dept;
				}
				
			    public String nom_reg;

				public String getNom_reg () {
					return this.nom_reg;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this._id == null) ? 0 : this._id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this._id == null) {
							if (other._id != null)
								return false;
						
						} else if (!this._id.equals(other._id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other._id = this._id;
	            other.numer_sta = this.numer_sta;
	            other.cod_tend = this.cod_tend;
	            other.ctypen = this.ctypen;
	            other.date = this.date;
	            other.dd = this.dd;
	            other.etat_sol = this.etat_sol;
	            other.ff = this.ff;
	            other.hbas = this.hbas;
	            other.hnuagen = this.hnuagen;
	            other.n = this.n;
	            other.nbas = this.nbas;
	            other.nnuagen = this.nnuagen;
	            other.per = this.per;
	            other.pmer = this.pmer;
	            other.pres = this.pres;
	            other.t = this.t;
	            other.td = this.td;
	            other.tend = this.tend;
	            other.tend24 = this.tend24;
	            other.tminsol = this.tminsol;
	            other.tnn = this.tnn;
	            other.txn = this.txn;
	            other.u = this.u;
	            other.vv = this.vv;
	            other.code_dep = this.code_dep;
	            other.code_reg = this.code_reg;
	            other.nom_dept = this.nom_dept;
	            other.nom_reg = this.nom_reg;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other._id = this._id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
						this.numer_sta = readInteger(dis);
					
					this.cod_tend = readString(dis);
					
					this.ctypen = readString(dis);
					
					this.date = readDate(dis);
					
						this.dd = readInteger(dis);
					
					this.etat_sol = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ff = null;
           				} else {
           			    	this.ff = dis.readDouble();
           				}
					
					this.hbas = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.hnuagen = null;
           				} else {
           			    	this.hnuagen = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.n = null;
           				} else {
           			    	this.n = dis.readDouble();
           				}
					
					this.nbas = readString(dis);
					
					this.nnuagen = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.per = null;
           				} else {
           			    	this.per = dis.readDouble();
           				}
					
						this.pmer = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pres = null;
           				} else {
           			    	this.pres = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.t = null;
           				} else {
           			    	this.t = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.td = null;
           				} else {
           			    	this.td = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tend = null;
           				} else {
           			    	this.tend = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tend24 = null;
           				} else {
           			    	this.tend24 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tminsol = null;
           				} else {
           			    	this.tminsol = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tnn = null;
           				} else {
           			    	this.tnn = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.txn = null;
           				} else {
           			    	this.txn = dis.readFloat();
           				}
					
						this.u = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.vv = null;
           				} else {
           			    	this.vv = dis.readDouble();
           				}
					
					this.code_dep = readString(dis);
					
					this.code_reg = readString(dis);
					
					this.nom_dept = readString(dis);
					
					this.nom_reg = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// Integer
				
						writeInteger(this.numer_sta,dos);
					
					// String
				
						writeString(this.cod_tend,dos);
					
					// String
				
						writeString(this.ctypen,dos);
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// Integer
				
						writeInteger(this.dd,dos);
					
					// String
				
						writeString(this.etat_sol,dos);
					
					// Double
				
						if(this.ff == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ff);
		            	}
					
					// String
				
						writeString(this.hbas,dos);
					
					// Float
				
						if(this.hnuagen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.hnuagen);
		            	}
					
					// Double
				
						if(this.n == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.n);
		            	}
					
					// String
				
						writeString(this.nbas,dos);
					
					// String
				
						writeString(this.nnuagen,dos);
					
					// Double
				
						if(this.per == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.per);
		            	}
					
					// Integer
				
						writeInteger(this.pmer,dos);
					
					// Float
				
						if(this.pres == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.pres);
		            	}
					
					// Double
				
						if(this.t == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.t);
		            	}
					
					// Double
				
						if(this.td == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.td);
		            	}
					
					// Double
				
						if(this.tend == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.tend);
		            	}
					
					// Double
				
						if(this.tend24 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.tend24);
		            	}
					
					// Float
				
						if(this.tminsol == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.tminsol);
		            	}
					
					// Float
				
						if(this.tnn == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.tnn);
		            	}
					
					// Float
				
						if(this.txn == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.txn);
		            	}
					
					// Integer
				
						writeInteger(this.u,dos);
					
					// Double
				
						if(this.vv == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.vv);
		            	}
					
					// String
				
						writeString(this.code_dep,dos);
					
					// String
				
						writeString(this.code_reg,dos);
					
					// String
				
						writeString(this.nom_dept,dos);
					
					// String
				
						writeString(this.nom_reg,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_id="+_id);
		sb.append(",numer_sta="+String.valueOf(numer_sta));
		sb.append(",cod_tend="+cod_tend);
		sb.append(",ctypen="+ctypen);
		sb.append(",date="+String.valueOf(date));
		sb.append(",dd="+String.valueOf(dd));
		sb.append(",etat_sol="+etat_sol);
		sb.append(",ff="+String.valueOf(ff));
		sb.append(",hbas="+hbas);
		sb.append(",hnuagen="+String.valueOf(hnuagen));
		sb.append(",n="+String.valueOf(n));
		sb.append(",nbas="+nbas);
		sb.append(",nnuagen="+nnuagen);
		sb.append(",per="+String.valueOf(per));
		sb.append(",pmer="+String.valueOf(pmer));
		sb.append(",pres="+String.valueOf(pres));
		sb.append(",t="+String.valueOf(t));
		sb.append(",td="+String.valueOf(td));
		sb.append(",tend="+String.valueOf(tend));
		sb.append(",tend24="+String.valueOf(tend24));
		sb.append(",tminsol="+String.valueOf(tminsol));
		sb.append(",tnn="+String.valueOf(tnn));
		sb.append(",txn="+String.valueOf(txn));
		sb.append(",u="+String.valueOf(u));
		sb.append(",vv="+String.valueOf(vv));
		sb.append(",code_dep="+code_dep);
		sb.append(",code_reg="+code_reg);
		sb.append(",nom_dept="+nom_dept);
		sb.append(",nom_reg="+nom_reg);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this._id, other._id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tMongoDBInput_1Struct implements routines.system.IPersistableRow<after_tMongoDBInput_1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String _id;

				public String get_id () {
					return this._id;
				}
				
			    public Integer numer_sta;

				public Integer getNumer_sta () {
					return this.numer_sta;
				}
				
			    public String cod_tend;

				public String getCod_tend () {
					return this.cod_tend;
				}
				
			    public String ctypen;

				public String getCtypen () {
					return this.ctypen;
				}
				
			    public java.util.Date date;

				public java.util.Date getDate () {
					return this.date;
				}
				
			    public Integer dd;

				public Integer getDd () {
					return this.dd;
				}
				
			    public String etat_sol;

				public String getEtat_sol () {
					return this.etat_sol;
				}
				
			    public Double ff;

				public Double getFf () {
					return this.ff;
				}
				
			    public String hbas;

				public String getHbas () {
					return this.hbas;
				}
				
			    public Float hnuagen;

				public Float getHnuagen () {
					return this.hnuagen;
				}
				
			    public Double n;

				public Double getN () {
					return this.n;
				}
				
			    public String nbas;

				public String getNbas () {
					return this.nbas;
				}
				
			    public String nnuagen;

				public String getNnuagen () {
					return this.nnuagen;
				}
				
			    public Double per;

				public Double getPer () {
					return this.per;
				}
				
			    public Integer pmer;

				public Integer getPmer () {
					return this.pmer;
				}
				
			    public Float pres;

				public Float getPres () {
					return this.pres;
				}
				
			    public Double t;

				public Double getT () {
					return this.t;
				}
				
			    public Double td;

				public Double getTd () {
					return this.td;
				}
				
			    public Double tend;

				public Double getTend () {
					return this.tend;
				}
				
			    public Double tend24;

				public Double getTend24 () {
					return this.tend24;
				}
				
			    public Float tminsol;

				public Float getTminsol () {
					return this.tminsol;
				}
				
			    public Float tnn;

				public Float getTnn () {
					return this.tnn;
				}
				
			    public Float txn;

				public Float getTxn () {
					return this.txn;
				}
				
			    public Integer u;

				public Integer getU () {
					return this.u;
				}
				
			    public Double vv;

				public Double getVv () {
					return this.vv;
				}
				
			    public String code_dep;

				public String getCode_dep () {
					return this.code_dep;
				}
				
			    public String code_reg;

				public String getCode_reg () {
					return this.code_reg;
				}
				
			    public String nom_dept;

				public String getNom_dept () {
					return this.nom_dept;
				}
				
			    public String nom_reg;

				public String getNom_reg () {
					return this.nom_reg;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this._id == null) ? 0 : this._id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tMongoDBInput_1Struct other = (after_tMongoDBInput_1Struct) obj;
		
						if (this._id == null) {
							if (other._id != null)
								return false;
						
						} else if (!this._id.equals(other._id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tMongoDBInput_1Struct other) {

		other._id = this._id;
	            other.numer_sta = this.numer_sta;
	            other.cod_tend = this.cod_tend;
	            other.ctypen = this.ctypen;
	            other.date = this.date;
	            other.dd = this.dd;
	            other.etat_sol = this.etat_sol;
	            other.ff = this.ff;
	            other.hbas = this.hbas;
	            other.hnuagen = this.hnuagen;
	            other.n = this.n;
	            other.nbas = this.nbas;
	            other.nnuagen = this.nnuagen;
	            other.per = this.per;
	            other.pmer = this.pmer;
	            other.pres = this.pres;
	            other.t = this.t;
	            other.td = this.td;
	            other.tend = this.tend;
	            other.tend24 = this.tend24;
	            other.tminsol = this.tminsol;
	            other.tnn = this.tnn;
	            other.txn = this.txn;
	            other.u = this.u;
	            other.vv = this.vv;
	            other.code_dep = this.code_dep;
	            other.code_reg = this.code_reg;
	            other.nom_dept = this.nom_dept;
	            other.nom_reg = this.nom_reg;
	            
	}

	public void copyKeysDataTo(after_tMongoDBInput_1Struct other) {

		other._id = this._id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
						this.numer_sta = readInteger(dis);
					
					this.cod_tend = readString(dis);
					
					this.ctypen = readString(dis);
					
					this.date = readDate(dis);
					
						this.dd = readInteger(dis);
					
					this.etat_sol = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ff = null;
           				} else {
           			    	this.ff = dis.readDouble();
           				}
					
					this.hbas = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.hnuagen = null;
           				} else {
           			    	this.hnuagen = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.n = null;
           				} else {
           			    	this.n = dis.readDouble();
           				}
					
					this.nbas = readString(dis);
					
					this.nnuagen = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.per = null;
           				} else {
           			    	this.per = dis.readDouble();
           				}
					
						this.pmer = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pres = null;
           				} else {
           			    	this.pres = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.t = null;
           				} else {
           			    	this.t = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.td = null;
           				} else {
           			    	this.td = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tend = null;
           				} else {
           			    	this.tend = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tend24 = null;
           				} else {
           			    	this.tend24 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tminsol = null;
           				} else {
           			    	this.tminsol = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tnn = null;
           				} else {
           			    	this.tnn = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.txn = null;
           				} else {
           			    	this.txn = dis.readFloat();
           				}
					
						this.u = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.vv = null;
           				} else {
           			    	this.vv = dis.readDouble();
           				}
					
					this.code_dep = readString(dis);
					
					this.code_reg = readString(dis);
					
					this.nom_dept = readString(dis);
					
					this.nom_reg = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// Integer
				
						writeInteger(this.numer_sta,dos);
					
					// String
				
						writeString(this.cod_tend,dos);
					
					// String
				
						writeString(this.ctypen,dos);
					
					// java.util.Date
				
						writeDate(this.date,dos);
					
					// Integer
				
						writeInteger(this.dd,dos);
					
					// String
				
						writeString(this.etat_sol,dos);
					
					// Double
				
						if(this.ff == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ff);
		            	}
					
					// String
				
						writeString(this.hbas,dos);
					
					// Float
				
						if(this.hnuagen == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.hnuagen);
		            	}
					
					// Double
				
						if(this.n == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.n);
		            	}
					
					// String
				
						writeString(this.nbas,dos);
					
					// String
				
						writeString(this.nnuagen,dos);
					
					// Double
				
						if(this.per == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.per);
		            	}
					
					// Integer
				
						writeInteger(this.pmer,dos);
					
					// Float
				
						if(this.pres == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.pres);
		            	}
					
					// Double
				
						if(this.t == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.t);
		            	}
					
					// Double
				
						if(this.td == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.td);
		            	}
					
					// Double
				
						if(this.tend == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.tend);
		            	}
					
					// Double
				
						if(this.tend24 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.tend24);
		            	}
					
					// Float
				
						if(this.tminsol == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.tminsol);
		            	}
					
					// Float
				
						if(this.tnn == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.tnn);
		            	}
					
					// Float
				
						if(this.txn == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.txn);
		            	}
					
					// Integer
				
						writeInteger(this.u,dos);
					
					// Double
				
						if(this.vv == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.vv);
		            	}
					
					// String
				
						writeString(this.code_dep,dos);
					
					// String
				
						writeString(this.code_reg,dos);
					
					// String
				
						writeString(this.nom_dept,dos);
					
					// String
				
						writeString(this.nom_reg,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_id="+_id);
		sb.append(",numer_sta="+String.valueOf(numer_sta));
		sb.append(",cod_tend="+cod_tend);
		sb.append(",ctypen="+ctypen);
		sb.append(",date="+String.valueOf(date));
		sb.append(",dd="+String.valueOf(dd));
		sb.append(",etat_sol="+etat_sol);
		sb.append(",ff="+String.valueOf(ff));
		sb.append(",hbas="+hbas);
		sb.append(",hnuagen="+String.valueOf(hnuagen));
		sb.append(",n="+String.valueOf(n));
		sb.append(",nbas="+nbas);
		sb.append(",nnuagen="+nnuagen);
		sb.append(",per="+String.valueOf(per));
		sb.append(",pmer="+String.valueOf(pmer));
		sb.append(",pres="+String.valueOf(pres));
		sb.append(",t="+String.valueOf(t));
		sb.append(",td="+String.valueOf(td));
		sb.append(",tend="+String.valueOf(tend));
		sb.append(",tend24="+String.valueOf(tend24));
		sb.append(",tminsol="+String.valueOf(tminsol));
		sb.append(",tnn="+String.valueOf(tnn));
		sb.append(",txn="+String.valueOf(txn));
		sb.append(",u="+String.valueOf(u));
		sb.append(",vv="+String.valueOf(vv));
		sb.append(",code_dep="+code_dep);
		sb.append(",code_reg="+code_reg);
		sb.append(",nom_dept="+nom_dept);
		sb.append(",nom_reg="+nom_reg);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tMongoDBInput_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this._id, other._id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMongoDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputJSON_1Process(globalMap);

		row2Struct row2 = new row2Struct();
row4Struct row4 = new row4Struct();
out_2Struct out_2 = new out_2Struct();




	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				java.util.Date date;
    				String code_reg;BigDecimal t_sum;
           			int t_count = 0;
           			
           			Double pmer_sum;
					int pmer_count = 0;
           			
           			Double dd_sum;
					int dd_count = 0;
           			BigDecimal pres_sum;
           			int pres_count = 0;
           			BigDecimal ff_sum;
           			int ff_count = 0;
           			BigDecimal td_sum;
           			int td_count = 0;
           			BigDecimal hnuagen_sum;
           			int hnuagen_count = 0;
           			BigDecimal n_sum;
           			int n_count = 0;
           			BigDecimal per_sum;
           			int per_count = 0;
           			BigDecimal tend_sum;
           			int tend_count = 0;
           			BigDecimal tend24_sum;
           			int tend24_count = 0;
           			BigDecimal tminsol_sum;
           			int tminsol_count = 0;
           			BigDecimal tnn_sum;
           			int tnn_count = 0;
           			BigDecimal txn_sum;
           			int txn_count = 0;
           			
           			Double u_sum;
					int u_count = 0;
           			BigDecimal vv_sum;
           			int vv_count = 0;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.date == null) ? 0 : this.date.hashCode());
							
							result = prime * result + ((this.code_reg == null) ? 0 : this.code_reg.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.date == null) {
								if (other.date != null) 
									return false;
							} else if (!this.date.equals(other.date)) 
								return false;
						
							if (this.code_reg == null) {
								if (other.code_reg != null) 
									return false;
							} else if (!this.code_reg.equals(other.code_reg)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tMongoDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMongoDBInput_1", false);
		start_Hash.put("tMongoDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tMongoDBInput_1";

	
		int tos_count_tMongoDBInput_1 = 0;
		

	int nb_line_tMongoDBInput_1 = 0;
	
		
		
			com.mongodb.MongoClient mongo_tMongoDBInput_1=null;
			com.mongodb.client.MongoDatabase db_tMongoDBInput_1=null;
		

			
			
				
				
				mongo_tMongoDBInput_1=(com.mongodb.MongoClient)globalMap.get("mongo_tMongoDBConnection_1");
				db_tMongoDBInput_1 = (com.mongodb.client.MongoDatabase) globalMap.get("db_tMongoDBConnection_1");
				


				
				
					com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBInput_1 = db_tMongoDBInput_1.getCollection("meteofrance");
				
				
				
				try{
					// Add warning if an index is not in the query.
					boolean needIndexWarning = true;
					String indexList = "";
					
					for (com.mongodb.DBObject index: coll_tMongoDBInput_1.listIndexes(com.mongodb.DBObject.class)) {
					
	                
	                    for (String key: ((com.mongodb.DBObject)index.get("key")).keySet()) {
	                        // The regexp is:
	                        // - contain the db DBcolumnName between two backslashed quotes
	                        // - is followed at some point by a colon
	                        // - there is no comma between the the DBcolumnName and the colon
	                        if  (("{}").matches(".*" + key + "[^,]*:.*")) {
	                            // We have an index, do not print error message
	                            needIndexWarning = false;
	                        } else {
	                            // This index is not in the query, add it into the indexList
	                            indexList += ", " + key;
	                        }
	                    }
	                }
	                if ((!"".equals(indexList)) && (needIndexWarning)) {
	                    
	                        System.err.println("tMongoDBInput_1 - The query does not contain any reference an index.  [" + indexList.substring(1) + " ]");
	                        
	                }
	            }catch(com.mongodb.MongoException e){
	            	// caught an exception after issuing the getIndexInfo()
	            	// don't fail the whole job
	            	// maybe due to authorization
	            }

	                
	                
					org.bson.Document myQuery_tMongoDBInput_1 = org.bson.Document.parse("{}");
	                com.mongodb.client.FindIterable<org.bson.Document> fi_tMongoDBInput_1 = coll_tMongoDBInput_1.find(myQuery_tMongoDBInput_1).noCursorTimeout(false);
					
	                
		  			
		  			

		  			 
	                
				
				class DBObjectInputUtil_tMongoDBInput_1{
					// Get the node value in embedded document, 
					//If have no embedded document get root document node.
					
					public Object getValue(String parentNode,String currentName,org.bson.Document dbObject){
						Object value=null;
						if(dbObject==null){
							return null;
						}
						if (parentNode == null || "".equals(parentNode)) {
						    if ("*".equals(currentName)) {
						        value = dbObject;
						    } else if (dbObject.get(currentName)!=null){
								value=dbObject.get(currentName);
							}
						}else{
							String objNames[] = objNames = parentNode.split("\\.");
							org.bson.Document currentObj=dbObject;
							for(int i=0;i<objNames.length;i++){
								currentObj=(org.bson.Document)currentObj.get(objNames[i]);
								if(currentObj==null){
									break;
								}
							}
							if ("*".equals(currentName)) {
                                value = currentObj;
                            } else if(currentObj!=null){
								value=currentObj.get(currentName);
							}
						}
						return value;
					}
				}
				DBObjectInputUtil_tMongoDBInput_1 dbObjectInputUtil_tMongoDBInput_1=new DBObjectInputUtil_tMongoDBInput_1();
				java.util.Map<String, String> pathMap_tMongoDBInput_1=new java.util.HashMap<String, String>();
				pathMap_tMongoDBInput_1.put("_id","");
				pathMap_tMongoDBInput_1.put("numer_sta","");
				pathMap_tMongoDBInput_1.put("cod_tend","");
				pathMap_tMongoDBInput_1.put("ctypen","");
				pathMap_tMongoDBInput_1.put("date","");
				pathMap_tMongoDBInput_1.put("dd","");
				pathMap_tMongoDBInput_1.put("etat_sol","");
				pathMap_tMongoDBInput_1.put("ff","");
				pathMap_tMongoDBInput_1.put("hbas","");
				pathMap_tMongoDBInput_1.put("hnuagen","");
				pathMap_tMongoDBInput_1.put("n","");
				pathMap_tMongoDBInput_1.put("nbas","");
				pathMap_tMongoDBInput_1.put("nnuagen","");
				pathMap_tMongoDBInput_1.put("per","");
				pathMap_tMongoDBInput_1.put("pmer","");
				pathMap_tMongoDBInput_1.put("pres","");
				pathMap_tMongoDBInput_1.put("t","");
				pathMap_tMongoDBInput_1.put("td","");
				pathMap_tMongoDBInput_1.put("tend","");
				pathMap_tMongoDBInput_1.put("tend24","");
				pathMap_tMongoDBInput_1.put("tminsol","");
				pathMap_tMongoDBInput_1.put("tnn","");
				pathMap_tMongoDBInput_1.put("txn","");
				pathMap_tMongoDBInput_1.put("u","");
				pathMap_tMongoDBInput_1.put("vv","");
				pathMap_tMongoDBInput_1.put("code_dep","");
				pathMap_tMongoDBInput_1.put("code_reg","");
				pathMap_tMongoDBInput_1.put("nom_dept","");
				pathMap_tMongoDBInput_1.put("nom_reg","");

						
					com.mongodb.client.MongoCursor<org.bson.Document> cursor_tMongoDBInput_1 = fi_tMongoDBInput_1.iterator();
						
				while (cursor_tMongoDBInput_1.hasNext()){
				org.bson.Document o_tMongoDBInput_1 = cursor_tMongoDBInput_1.next();
				nb_line_tMongoDBInput_1++;
				Object valueObj_tMongoDBInput_1=null;
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("_id"),"_id",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
					row2._id = valueObj_tMongoDBInput_1.toString();
				}else{
					row2._id = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("numer_sta"),"numer_sta",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
                            if (valueObj_tMongoDBInput_1.getClass().equals(Double.class)) {
                                row2.numer_sta = ParserUtils.parseTo_Double(valueObj_tMongoDBInput_1.toString()).intValue();
                            } else {
                                row2.numer_sta = ParserUtils.parseTo_Integer(valueObj_tMongoDBInput_1.toString());
                            }
				}else{
					row2.numer_sta = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("cod_tend"),"cod_tend",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
					row2.cod_tend = valueObj_tMongoDBInput_1.toString();
				}else{
					row2.cod_tend = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("ctypen"),"ctypen",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
					row2.ctypen = valueObj_tMongoDBInput_1.toString();
				}else{
					row2.ctypen = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("date"),"date",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
                            if (valueObj_tMongoDBInput_1 instanceof java.util.Date) {
																																row2.date = ParserUtils.parseTo_Date((java.util.Date)valueObj_tMongoDBInput_1, "yyyy-MM-dd HH:mm:ss");
                            } else {
                                row2.date = ParserUtils.parseTo_Date((String)valueObj_tMongoDBInput_1, "yyyy-MM-dd HH:mm:ss");
                            }
				}else{
					row2.date = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("dd"),"dd",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
                            if (valueObj_tMongoDBInput_1.getClass().equals(Double.class)) {
                                row2.dd = ParserUtils.parseTo_Double(valueObj_tMongoDBInput_1.toString()).intValue();
                            } else {
                                row2.dd = ParserUtils.parseTo_Integer(valueObj_tMongoDBInput_1.toString());
                            }
				}else{
					row2.dd = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("etat_sol"),"etat_sol",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
					row2.etat_sol = valueObj_tMongoDBInput_1.toString();
				}else{
					row2.etat_sol = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("ff"),"ff",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
                            row2.ff = ParserUtils.parseTo_Double(valueObj_tMongoDBInput_1.toString());
				}else{
					row2.ff = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("hbas"),"hbas",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
					row2.hbas = valueObj_tMongoDBInput_1.toString();
				}else{
					row2.hbas = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("hnuagen"),"hnuagen",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
                            row2.hnuagen = ParserUtils.parseTo_Float(valueObj_tMongoDBInput_1.toString());
				}else{
					row2.hnuagen = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("n"),"n",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
                            row2.n = ParserUtils.parseTo_Double(valueObj_tMongoDBInput_1.toString());
				}else{
					row2.n = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("nbas"),"nbas",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
					row2.nbas = valueObj_tMongoDBInput_1.toString();
				}else{
					row2.nbas = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("nnuagen"),"nnuagen",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
					row2.nnuagen = valueObj_tMongoDBInput_1.toString();
				}else{
					row2.nnuagen = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("per"),"per",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
                            row2.per = ParserUtils.parseTo_Double(valueObj_tMongoDBInput_1.toString());
				}else{
					row2.per = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("pmer"),"pmer",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
                            if (valueObj_tMongoDBInput_1.getClass().equals(Double.class)) {
                                row2.pmer = ParserUtils.parseTo_Double(valueObj_tMongoDBInput_1.toString()).intValue();
                            } else {
                                row2.pmer = ParserUtils.parseTo_Integer(valueObj_tMongoDBInput_1.toString());
                            }
				}else{
					row2.pmer = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("pres"),"pres",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
                            row2.pres = ParserUtils.parseTo_Float(valueObj_tMongoDBInput_1.toString());
				}else{
					row2.pres = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("t"),"t",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
                            row2.t = ParserUtils.parseTo_Double(valueObj_tMongoDBInput_1.toString());
				}else{
					row2.t = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("td"),"td",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
                            row2.td = ParserUtils.parseTo_Double(valueObj_tMongoDBInput_1.toString());
				}else{
					row2.td = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("tend"),"tend",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
                            row2.tend = ParserUtils.parseTo_Double(valueObj_tMongoDBInput_1.toString());
				}else{
					row2.tend = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("tend24"),"tend24",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
                            row2.tend24 = ParserUtils.parseTo_Double(valueObj_tMongoDBInput_1.toString());
				}else{
					row2.tend24 = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("tminsol"),"tminsol",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
                            row2.tminsol = ParserUtils.parseTo_Float(valueObj_tMongoDBInput_1.toString());
				}else{
					row2.tminsol = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("tnn"),"tnn",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
                            row2.tnn = ParserUtils.parseTo_Float(valueObj_tMongoDBInput_1.toString());
				}else{
					row2.tnn = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("txn"),"txn",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
                            row2.txn = ParserUtils.parseTo_Float(valueObj_tMongoDBInput_1.toString());
				}else{
					row2.txn = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("u"),"u",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
                            if (valueObj_tMongoDBInput_1.getClass().equals(Double.class)) {
                                row2.u = ParserUtils.parseTo_Double(valueObj_tMongoDBInput_1.toString()).intValue();
                            } else {
                                row2.u = ParserUtils.parseTo_Integer(valueObj_tMongoDBInput_1.toString());
                            }
				}else{
					row2.u = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("vv"),"vv",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
                            row2.vv = ParserUtils.parseTo_Double(valueObj_tMongoDBInput_1.toString());
				}else{
					row2.vv = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("code_dep"),"code_dep",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
					row2.code_dep = valueObj_tMongoDBInput_1.toString();
				}else{
					row2.code_dep = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("code_reg"),"code_reg",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
					row2.code_reg = valueObj_tMongoDBInput_1.toString();
				}else{
					row2.code_reg = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("nom_dept"),"nom_dept",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
					row2.nom_dept = valueObj_tMongoDBInput_1.toString();
				}else{
					row2.nom_dept = null;
				}
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("nom_reg"),"nom_reg",o_tMongoDBInput_1);
				if(valueObj_tMongoDBInput_1!=null && valueObj_tMongoDBInput_1.toString().length() > 0) {
					row2.nom_reg = valueObj_tMongoDBInput_1.toString();
				}else{
					row2.nom_reg = null;
				}


 



/**
 * [tMongoDBInput_1 begin ] stop
 */
	
	/**
	 * [tMongoDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_1";

	

 


	tos_count_tMongoDBInput_1++;

/**
 * [tMongoDBInput_1 main ] stop
 */
	
	/**
	 * [tMongoDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_1";

	

 



/**
 * [tMongoDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					
	
operation_finder_tAggregateRow_1.date = row2.date;
			operation_finder_tAggregateRow_1.code_reg = row2.code_reg;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.date = operation_finder_tAggregateRow_1.date;
				operation_result_tAggregateRow_1.code_reg = operation_finder_tAggregateRow_1.code_reg;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
				if(row2.t != null) { // G_OutMain_AggR_546
				
				operation_result_tAggregateRow_1.t_count++;
				
					if(operation_result_tAggregateRow_1.t_sum == null) {
						operation_result_tAggregateRow_1.t_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_1.t_sum = operation_result_tAggregateRow_1.t_sum.add(
						new BigDecimal(
							String.valueOf(
								row2.t
							)
						)
					);
					
				} // G_OutMain_AggR_546
				
				if(row2.pmer != null) { // G_OutMain_AggR_546
				
				operation_result_tAggregateRow_1.pmer_count++;
				
					if(operation_result_tAggregateRow_1.pmer_sum == null) {
						operation_result_tAggregateRow_1.pmer_sum = (double) 0;
					}
					
					if( row2.pmer != null)
						operation_result_tAggregateRow_1.pmer_sum += row2.pmer;
				} // G_OutMain_AggR_546
				
				if(row2.dd != null) { // G_OutMain_AggR_546
				
				operation_result_tAggregateRow_1.dd_count++;
				
					if(operation_result_tAggregateRow_1.dd_sum == null) {
						operation_result_tAggregateRow_1.dd_sum = (double) 0;
					}
					
					if( row2.dd != null)
						operation_result_tAggregateRow_1.dd_sum += row2.dd;
				} // G_OutMain_AggR_546
				
				if(row2.pres != null) { // G_OutMain_AggR_546
				
				operation_result_tAggregateRow_1.pres_count++;
				
					if(operation_result_tAggregateRow_1.pres_sum == null) {
						operation_result_tAggregateRow_1.pres_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_1.pres_sum = operation_result_tAggregateRow_1.pres_sum.add(
						new BigDecimal(
							String.valueOf(
								row2.pres
							)
						)
					);
					
				} // G_OutMain_AggR_546
				
				if(row2.ff != null) { // G_OutMain_AggR_546
				
				operation_result_tAggregateRow_1.ff_count++;
				
					if(operation_result_tAggregateRow_1.ff_sum == null) {
						operation_result_tAggregateRow_1.ff_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_1.ff_sum = operation_result_tAggregateRow_1.ff_sum.add(
						new BigDecimal(
							String.valueOf(
								row2.ff
							)
						)
					);
					
				} // G_OutMain_AggR_546
				
				if(row2.td != null) { // G_OutMain_AggR_546
				
				operation_result_tAggregateRow_1.td_count++;
				
					if(operation_result_tAggregateRow_1.td_sum == null) {
						operation_result_tAggregateRow_1.td_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_1.td_sum = operation_result_tAggregateRow_1.td_sum.add(
						new BigDecimal(
							String.valueOf(
								row2.td
							)
						)
					);
					
				} // G_OutMain_AggR_546
				
				if(row2.hnuagen != null) { // G_OutMain_AggR_546
				
				operation_result_tAggregateRow_1.hnuagen_count++;
				
					if(operation_result_tAggregateRow_1.hnuagen_sum == null) {
						operation_result_tAggregateRow_1.hnuagen_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_1.hnuagen_sum = operation_result_tAggregateRow_1.hnuagen_sum.add(
						new BigDecimal(
							String.valueOf(
								row2.hnuagen
							)
						)
					);
					
				} // G_OutMain_AggR_546
				
				if(row2.n != null) { // G_OutMain_AggR_546
				
				operation_result_tAggregateRow_1.n_count++;
				
					if(operation_result_tAggregateRow_1.n_sum == null) {
						operation_result_tAggregateRow_1.n_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_1.n_sum = operation_result_tAggregateRow_1.n_sum.add(
						new BigDecimal(
							String.valueOf(
								row2.n
							)
						)
					);
					
				} // G_OutMain_AggR_546
				
				if(row2.per != null) { // G_OutMain_AggR_546
				
				operation_result_tAggregateRow_1.per_count++;
				
					if(operation_result_tAggregateRow_1.per_sum == null) {
						operation_result_tAggregateRow_1.per_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_1.per_sum = operation_result_tAggregateRow_1.per_sum.add(
						new BigDecimal(
							String.valueOf(
								row2.per
							)
						)
					);
					
				} // G_OutMain_AggR_546
				
				if(row2.tend != null) { // G_OutMain_AggR_546
				
				operation_result_tAggregateRow_1.tend_count++;
				
					if(operation_result_tAggregateRow_1.tend_sum == null) {
						operation_result_tAggregateRow_1.tend_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_1.tend_sum = operation_result_tAggregateRow_1.tend_sum.add(
						new BigDecimal(
							String.valueOf(
								row2.tend
							)
						)
					);
					
				} // G_OutMain_AggR_546
				
				if(row2.tend24 != null) { // G_OutMain_AggR_546
				
				operation_result_tAggregateRow_1.tend24_count++;
				
					if(operation_result_tAggregateRow_1.tend24_sum == null) {
						operation_result_tAggregateRow_1.tend24_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_1.tend24_sum = operation_result_tAggregateRow_1.tend24_sum.add(
						new BigDecimal(
							String.valueOf(
								row2.tend24
							)
						)
					);
					
				} // G_OutMain_AggR_546
				
				if(row2.tminsol != null) { // G_OutMain_AggR_546
				
				operation_result_tAggregateRow_1.tminsol_count++;
				
					if(operation_result_tAggregateRow_1.tminsol_sum == null) {
						operation_result_tAggregateRow_1.tminsol_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_1.tminsol_sum = operation_result_tAggregateRow_1.tminsol_sum.add(
						new BigDecimal(
							String.valueOf(
								row2.tminsol
							)
						)
					);
					
				} // G_OutMain_AggR_546
				
				if(row2.tnn != null) { // G_OutMain_AggR_546
				
				operation_result_tAggregateRow_1.tnn_count++;
				
					if(operation_result_tAggregateRow_1.tnn_sum == null) {
						operation_result_tAggregateRow_1.tnn_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_1.tnn_sum = operation_result_tAggregateRow_1.tnn_sum.add(
						new BigDecimal(
							String.valueOf(
								row2.tnn
							)
						)
					);
					
				} // G_OutMain_AggR_546
				
				if(row2.txn != null) { // G_OutMain_AggR_546
				
				operation_result_tAggregateRow_1.txn_count++;
				
					if(operation_result_tAggregateRow_1.txn_sum == null) {
						operation_result_tAggregateRow_1.txn_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_1.txn_sum = operation_result_tAggregateRow_1.txn_sum.add(
						new BigDecimal(
							String.valueOf(
								row2.txn
							)
						)
					);
					
				} // G_OutMain_AggR_546
				
				if(row2.u != null) { // G_OutMain_AggR_546
				
				operation_result_tAggregateRow_1.u_count++;
				
					if(operation_result_tAggregateRow_1.u_sum == null) {
						operation_result_tAggregateRow_1.u_sum = (double) 0;
					}
					
					if( row2.u != null)
						operation_result_tAggregateRow_1.u_sum += row2.u;
				} // G_OutMain_AggR_546
				
				if(row2.vv != null) { // G_OutMain_AggR_546
				
				operation_result_tAggregateRow_1.vv_count++;
				
					if(operation_result_tAggregateRow_1.vv_sum == null) {
						operation_result_tAggregateRow_1.vv_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_1.vv_sum = operation_result_tAggregateRow_1.vv_sum.add(
						new BigDecimal(
							String.valueOf(
								row2.vv
							)
						)
					);
					
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */



	
	/**
	 * [tMongoDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_1";

	

 



/**
 * [tMongoDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tMongoDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_1";

	

		}
		
globalMap.put("tMongoDBInput_1_NB_LINE", nb_line_tMongoDBInput_1);

 

ok_Hash.put("tMongoDBInput_1", true);
end_Hash.put("tMongoDBInput_1", System.currentTimeMillis());




/**
 * [tMongoDBInput_1 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */



	
	/**
	 * [tMongoDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMongoDBOutput_3", false);
		start_Hash.put("tMongoDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tMongoDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out_2");
					}
				
		int tos_count_tMongoDBOutput_3 = 0;
		

	
	int nb_line_tMongoDBOutput_3 = 0;
	
			class DBObjectUtil_tMongoDBOutput_3 {
				
				private org.bson.Document object = null;
				//Put value to embedded document
				//If have no embedded document, put the value to root document
				public void put(String parentNode, String curentName, Object value) {
					if (parentNode == null || "".equals(parentNode)) {
						object.put(curentName, value);
					} else {
						String objNames[]= parentNode.split("\\.");
						org.bson.Document lastNode = getParentNode(parentNode, objNames.length-1);
						lastNode.put(curentName, value);
						org.bson.Document parenttNode = null;
						for (int i = objNames.length - 1; i >=0; i--) {
							parenttNode=getParentNode(parentNode, i-1);
							parenttNode.put(objNames[i], lastNode);
							lastNode=clone(parenttNode);
						}
						object=lastNode;
					}
				}
				
				private org.bson.Document clone(org.bson.Document source){
					org.bson.Document to = new org.bson.Document();
					for(java.util.Map.Entry<String,Object> cur:source.entrySet()) {
						to.append(cur.getKey(), cur.getValue());
					}
					return to;
				}
				
				//Get node(embedded document) by path configuration
				public org.bson.Document getParentNode(String parentNode, int index) {
					org.bson.Document document = object;
					if (parentNode == null || "".equals(parentNode)) {
						return object;
					} else {
						String objNames[] = parentNode.split("\\.");
						for (int i = 0; i <= index; i++) {
							document = (org.bson.Document) document
									.get(objNames[i]);
							if (document == null) {
								document = new org.bson.Document();
								return document;
							}
							if (i == index) {
								break;
							}
						}
						return document;
					}
				}
				
				public void putkeyNode(String parentNode, String curentName, Object value){
					if (parentNode == null || "".equals(parentNode) || ".".equals(parentNode)) {
						put(parentNode, curentName, value);
					}else{
						put("", parentNode+"."+curentName, value);
					}
				}
			
				public org.bson.Document getObject() {
					return this.object;
				}
				
				public void setObject(org.bson.Document object){
					this.object=object;
				}
			
			}
			
			

			DBObjectUtil_tMongoDBOutput_3 updateObjectUtil_tMongoDBOutput_3=new DBObjectUtil_tMongoDBOutput_3();
			DBObjectUtil_tMongoDBOutput_3 queryObjectUtil_tMongoDBOutput_3=new DBObjectUtil_tMongoDBOutput_3();
			java.util.Map<String, String> pathMap_tMongoDBOutput_3=new java.util.HashMap<String, String>();
			com.mongodb.MongoClient mongo_tMongoDBOutput_3=null;
			com.mongodb.client.MongoDatabase db_tMongoDBOutput_3=null;
			
				pathMap_tMongoDBOutput_3.put("date","");
				
				pathMap_tMongoDBOutput_3.put("dd","");
				
				pathMap_tMongoDBOutput_3.put("ff","");
				
				pathMap_tMongoDBOutput_3.put("hnuagen","");
				
				pathMap_tMongoDBOutput_3.put("n","");
				
				pathMap_tMongoDBOutput_3.put("per","");
				
				pathMap_tMongoDBOutput_3.put("pmer","");
				
				pathMap_tMongoDBOutput_3.put("pres","");
				
				pathMap_tMongoDBOutput_3.put("t","");
				
				pathMap_tMongoDBOutput_3.put("td","");
				
				pathMap_tMongoDBOutput_3.put("tend","");
				
				pathMap_tMongoDBOutput_3.put("tend24","");
				
				pathMap_tMongoDBOutput_3.put("tminsol","");
				
				pathMap_tMongoDBOutput_3.put("tnn","");
				
				pathMap_tMongoDBOutput_3.put("txn","");
				
				pathMap_tMongoDBOutput_3.put("u","");
				
				pathMap_tMongoDBOutput_3.put("vv","");
				
				pathMap_tMongoDBOutput_3.put("code_reg","");
				
				pathMap_tMongoDBOutput_3.put("semaine_max_du_mois_0_1","");
				
				pathMap_tMongoDBOutput_3.put("code_region","");
				
				pathMap_tMongoDBOutput_3.put("horodate","");
				
				pathMap_tMongoDBOutput_3.put("plage_de_puissance_souscrite","");
				
				pathMap_tMongoDBOutput_3.put("region","");
				
				pathMap_tMongoDBOutput_3.put("profil","");
				
				pathMap_tMongoDBOutput_3.put("nb_points_soutirage","");
				
				pathMap_tMongoDBOutput_3.put("total_energie_soutiree_wh","");
				
			java.util.logging.Logger.getLogger("org.mongodb.driver").setLevel(java.util.logging.Level.SEVERE);
	 		    // Empty client options
                com.mongodb.MongoClientOptions clientOptions_tMongoDBOutput_3 = new com.mongodb.MongoClientOptions.Builder().build();
                // Empty client credentials list
                java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBOutput_3 = new java.util.ArrayList<com.mongodb.MongoCredential>();

                    com.mongodb.ServerAddress serverAddress_tMongoDBOutput_3 = new com.mongodb.ServerAddress("localhost", 27017);
                    mongo_tMongoDBOutput_3 = new com.mongodb.MongoClient(serverAddress_tMongoDBOutput_3, mongoCredentialList_tMongoDBOutput_3, clientOptions_tMongoDBOutput_3);
				resourceMap.put("mongo_tMongoDBOutput_3", mongo_tMongoDBOutput_3);
				db_tMongoDBOutput_3 = mongo_tMongoDBOutput_3.getDatabase("DB_projet");
				
			
					db_tMongoDBOutput_3.getCollection("meteo_enedis").drop();
			
			com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBOutput_3 = db_tMongoDBOutput_3.getCollection("meteo_enedis");
			
 



/**
 * [tMongoDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
					globalMap.get( "tHash_Lookup_row5" ))
					;					
					
	

row5Struct row5HashKey = new row5Struct();
row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out_2Struct out_2_tmp = new out_2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

            				    row4.date = aggregated_row_tAggregateRow_1.date;
            				    
                                if(aggregated_row_tAggregateRow_1.dd_count > 0){
                                	
	    								double row4_dd_temp = (double) aggregated_row_tAggregateRow_1.dd_sum / (double) aggregated_row_tAggregateRow_1.dd_count;
	    								
	    								row4.dd = (int) row4_dd_temp;
										
    								
                                } else {
                                		String count = "0";
   	    								
    		    							row4.dd = ParserUtils.parseTo_Integer(count);
    									
                                }
                                if(aggregated_row_tAggregateRow_1.ff_count > 0){
                                	
	    								row4.ff = aggregated_row_tAggregateRow_1.ff_sum.divide(new BigDecimal(String.valueOf(aggregated_row_tAggregateRow_1.ff_count)), 10, BigDecimal.ROUND_HALF_UP)
	    								
	    									.doubleValue()
	    								
	    								;
    								
                                } else {
                                		String count = "0";
   	    								
    		    							row4.ff = ParserUtils.parseTo_Double(count);
    									
                                }
                                if(aggregated_row_tAggregateRow_1.hnuagen_count > 0){
                                	
	    								row4.hnuagen = aggregated_row_tAggregateRow_1.hnuagen_sum.divide(new BigDecimal(String.valueOf(aggregated_row_tAggregateRow_1.hnuagen_count)), 10, BigDecimal.ROUND_HALF_UP)
	    								
	    									.floatValue()
	    								
	    								;
    								
                                } else {
                                		String count = "0";
   	    								
    		    							row4.hnuagen = ParserUtils.parseTo_Float(count);
    									
                                }
                                if(aggregated_row_tAggregateRow_1.n_count > 0){
                                	
	    								row4.n = aggregated_row_tAggregateRow_1.n_sum.divide(new BigDecimal(String.valueOf(aggregated_row_tAggregateRow_1.n_count)), 10, BigDecimal.ROUND_HALF_UP)
	    								
	    									.doubleValue()
	    								
	    								;
    								
                                } else {
                                		String count = "0";
   	    								
    		    							row4.n = ParserUtils.parseTo_Double(count);
    									
                                }
                                if(aggregated_row_tAggregateRow_1.per_count > 0){
                                	
	    								row4.per = aggregated_row_tAggregateRow_1.per_sum.divide(new BigDecimal(String.valueOf(aggregated_row_tAggregateRow_1.per_count)), 10, BigDecimal.ROUND_HALF_UP)
	    								
	    									.doubleValue()
	    								
	    								;
    								
                                } else {
                                		String count = "0";
   	    								
    		    							row4.per = ParserUtils.parseTo_Double(count);
    									
                                }
                                if(aggregated_row_tAggregateRow_1.pmer_count > 0){
                                	
	    								double row4_pmer_temp = (double) aggregated_row_tAggregateRow_1.pmer_sum / (double) aggregated_row_tAggregateRow_1.pmer_count;
	    								
	    								row4.pmer = (int) row4_pmer_temp;
										
    								
                                } else {
                                		String count = "0";
   	    								
    		    							row4.pmer = ParserUtils.parseTo_Integer(count);
    									
                                }
                                if(aggregated_row_tAggregateRow_1.pres_count > 0){
                                	
	    								row4.pres = aggregated_row_tAggregateRow_1.pres_sum.divide(new BigDecimal(String.valueOf(aggregated_row_tAggregateRow_1.pres_count)), 10, BigDecimal.ROUND_HALF_UP)
	    								
	    									.floatValue()
	    								
	    								;
    								
                                } else {
                                		String count = "0";
   	    								
    		    							row4.pres = ParserUtils.parseTo_Float(count);
    									
                                }
                                if(aggregated_row_tAggregateRow_1.t_count > 0){
                                	
	    								row4.t = aggregated_row_tAggregateRow_1.t_sum.divide(new BigDecimal(String.valueOf(aggregated_row_tAggregateRow_1.t_count)), 10, BigDecimal.ROUND_HALF_UP)
	    								
	    									.doubleValue()
	    								
	    								;
    								
                                } else {
                                		String count = "0";
   	    								
    		    							row4.t = ParserUtils.parseTo_Double(count);
    									
                                }
                                if(aggregated_row_tAggregateRow_1.td_count > 0){
                                	
	    								row4.td = aggregated_row_tAggregateRow_1.td_sum.divide(new BigDecimal(String.valueOf(aggregated_row_tAggregateRow_1.td_count)), 10, BigDecimal.ROUND_HALF_UP)
	    								
	    									.doubleValue()
	    								
	    								;
    								
                                } else {
                                		String count = "0";
   	    								
    		    							row4.td = ParserUtils.parseTo_Double(count);
    									
                                }
                                if(aggregated_row_tAggregateRow_1.tend_count > 0){
                                	
	    								row4.tend = aggregated_row_tAggregateRow_1.tend_sum.divide(new BigDecimal(String.valueOf(aggregated_row_tAggregateRow_1.tend_count)), 10, BigDecimal.ROUND_HALF_UP)
	    								
	    									.doubleValue()
	    								
	    								;
    								
                                } else {
                                		String count = "0";
   	    								
    		    							row4.tend = ParserUtils.parseTo_Double(count);
    									
                                }
                                if(aggregated_row_tAggregateRow_1.tend24_count > 0){
                                	
	    								row4.tend24 = aggregated_row_tAggregateRow_1.tend24_sum.divide(new BigDecimal(String.valueOf(aggregated_row_tAggregateRow_1.tend24_count)), 10, BigDecimal.ROUND_HALF_UP)
	    								
	    									.doubleValue()
	    								
	    								;
    								
                                } else {
                                		String count = "0";
   	    								
    		    							row4.tend24 = ParserUtils.parseTo_Double(count);
    									
                                }
                                if(aggregated_row_tAggregateRow_1.tminsol_count > 0){
                                	
	    								row4.tminsol = aggregated_row_tAggregateRow_1.tminsol_sum.divide(new BigDecimal(String.valueOf(aggregated_row_tAggregateRow_1.tminsol_count)), 10, BigDecimal.ROUND_HALF_UP)
	    								
	    									.floatValue()
	    								
	    								;
    								
                                } else {
                                		String count = "0";
   	    								
    		    							row4.tminsol = ParserUtils.parseTo_Float(count);
    									
                                }
                                if(aggregated_row_tAggregateRow_1.tnn_count > 0){
                                	
	    								row4.tnn = aggregated_row_tAggregateRow_1.tnn_sum.divide(new BigDecimal(String.valueOf(aggregated_row_tAggregateRow_1.tnn_count)), 10, BigDecimal.ROUND_HALF_UP)
	    								
	    									.floatValue()
	    								
	    								;
    								
                                } else {
                                		String count = "0";
   	    								
    		    							row4.tnn = ParserUtils.parseTo_Float(count);
    									
                                }
                                if(aggregated_row_tAggregateRow_1.txn_count > 0){
                                	
	    								row4.txn = aggregated_row_tAggregateRow_1.txn_sum.divide(new BigDecimal(String.valueOf(aggregated_row_tAggregateRow_1.txn_count)), 10, BigDecimal.ROUND_HALF_UP)
	    								
	    									.floatValue()
	    								
	    								;
    								
                                } else {
                                		String count = "0";
   	    								
    		    							row4.txn = ParserUtils.parseTo_Float(count);
    									
                                }
                                if(aggregated_row_tAggregateRow_1.u_count > 0){
                                	
	    								double row4_u_temp = (double) aggregated_row_tAggregateRow_1.u_sum / (double) aggregated_row_tAggregateRow_1.u_count;
	    								
	    								row4.u = (int) row4_u_temp;
										
    								
                                } else {
                                		String count = "0";
   	    								
    		    							row4.u = ParserUtils.parseTo_Integer(count);
    									
                                }
                                if(aggregated_row_tAggregateRow_1.vv_count > 0){
                                	
	    								row4.vv = aggregated_row_tAggregateRow_1.vv_sum.divide(new BigDecimal(String.valueOf(aggregated_row_tAggregateRow_1.vv_count)), 10, BigDecimal.ROUND_HALF_UP)
	    								
	    									.doubleValue()
	    								
	    								;
    								
                                } else {
                                		String count = "0";
   	    								
    		    							row4.vv = ParserUtils.parseTo_Double(count);
    									
                                }
            				    row4.code_reg = aggregated_row_tAggregateRow_1.code_reg;
            				    

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row5" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow5 = false;
       		  	    	
       		  	    	
 							row5Struct row5ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row5HashKey.code_region = row4.code_reg ;
                        		    		
                        		    		    row5HashKey.horodate = row4.date  == null ? null : new java.util.Date(row4.date .getTime());
                        		    		

								
		                        	row5HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row5.lookup( row5HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
	
		  								forceLooprow5 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow5 = true;
			           		  	} // G 21
                    		  	
                    		

							row5Struct row5 = null;
                    		  	 
							

								while ((tHash_Lookup_row5 != null && tHash_Lookup_row5.hasNext()) || forceLooprow5) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row5'
									
                    		  	 
							   
                    		  	 
	       		  	    	row5Struct fromLookup_row5 = null;
							row5 = row5Default;
										 
							
								
								if(!forceLooprow5) { // G 46
								
							
								 
							
								
								fromLookup_row5 = tHash_Lookup_row5.next();

							

							if(fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow5 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out_2 = null;

if(!rejectedInnerJoin_tMap_2 ) {

// # Output table : 'out_2'
out_2_tmp.date = row4.date ;
out_2_tmp.dd = row4.dd ;
out_2_tmp.ff = row4.ff ;
out_2_tmp.hnuagen = row4.hnuagen ;
out_2_tmp.n = row4.n ;
out_2_tmp.per = row4.per ;
out_2_tmp.pmer = row4.pmer ;
out_2_tmp.pres = row4.pres ;
out_2_tmp.t = row4.t ;
out_2_tmp.td = row4.td ;
out_2_tmp.tend = row4.tend ;
out_2_tmp.tend24 = row4.tend24 ;
out_2_tmp.tminsol = row4.tminsol ;
out_2_tmp.tnn = row4.tnn ;
out_2_tmp.txn = row4.txn ;
out_2_tmp.u = row4.u ;
out_2_tmp.vv = row4.vv ;
out_2_tmp.code_reg = row4.code_reg ;
out_2_tmp.semaine_max_du_mois_0_1 = row5.semaine_max_du_mois_0_1 ;
out_2_tmp.code_region = row5.code_region ;
out_2_tmp.horodate = row5.horodate ;
out_2_tmp.plage_de_puissance_souscrite = row5.plage_de_puissance_souscrite ;
out_2_tmp.region = row5.region ;
out_2_tmp.profil = row5.profil ;
out_2_tmp.nb_points_soutirage = row5.nb_points_soutirage ;
out_2_tmp.total_energie_soutiree_wh = row5.total_energie_soutiree_wh ;
out_2 = out_2_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out_2"
if(out_2 != null) { 



	
	/**
	 * [tMongoDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tMongoDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out_2"
						
						);
					}
					

	
try{
				updateObjectUtil_tMongoDBOutput_3.setObject(new org.bson.Document());
				
				

				
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("date"),"date", out_2.date);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("dd"),"dd", out_2.dd);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("ff"),"ff", out_2.ff);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("hnuagen"),"hnuagen", out_2.hnuagen);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("n"),"n", out_2.n);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("per"),"per", out_2.per);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("pmer"),"pmer", out_2.pmer);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("pres"),"pres", out_2.pres);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("t"),"t", out_2.t);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("td"),"td", out_2.td);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("tend"),"tend", out_2.tend);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("tend24"),"tend24", out_2.tend24);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("tminsol"),"tminsol", out_2.tminsol);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("tnn"),"tnn", out_2.tnn);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("txn"),"txn", out_2.txn);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("u"),"u", out_2.u);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("vv"),"vv", out_2.vv);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("code_reg"),"code_reg", out_2.code_reg);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("semaine_max_du_mois_0_1"),"semaine_max_du_mois_0_1", out_2.semaine_max_du_mois_0_1);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("code_region"),"code_region", out_2.code_region);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("horodate"),"horodate", out_2.horodate);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("plage_de_puissance_souscrite"),"plage_de_puissance_souscrite", out_2.plage_de_puissance_souscrite);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("region"),"region", out_2.region);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("profil"),"profil", out_2.profil);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("nb_points_soutirage"),"nb_points_soutirage", out_2.nb_points_soutirage);
                                        updateObjectUtil_tMongoDBOutput_3.put(pathMap_tMongoDBOutput_3.get("total_energie_soutiree_wh"),"total_energie_soutiree_wh", out_2.total_energie_soutiree_wh);
				org.bson.Document updateObj_tMongoDBOutput_3 = updateObjectUtil_tMongoDBOutput_3.getObject();
				
						coll_tMongoDBOutput_3.insertOne(updateObj_tMongoDBOutput_3);
					
				} catch (Exception e_tMongoDBOutput_3) {
				
    					
    						System.err.println(e_tMongoDBOutput_3.getMessage());
    					
    			}
				nb_line_tMongoDBOutput_3 ++;
				
 


	tos_count_tMongoDBOutput_3++;

/**
 * [tMongoDBOutput_3 main ] stop
 */
	
	/**
	 * [tMongoDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMongoDBOutput_3";

	

 



/**
 * [tMongoDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tMongoDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMongoDBOutput_3";

	

 



/**
 * [tMongoDBOutput_3 process_data_end ] stop
 */

} // End of branch "out_2"



	
		} // close loop of lookup 'row5' // G_TM_M_043
	
	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row5 != null) {
						tHash_Lookup_row5.endGet();
					}
					globalMap.remove( "tHash_Lookup_row5" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMongoDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tMongoDBOutput_3";

	

		if(mongo_tMongoDBOutput_3 != null){
			
				mongo_tMongoDBOutput_3.close();
			
		}
		resourceMap.put("finish_tMongoDBOutput_3", true); 
	
	globalMap.put("tMongoDBOutput_3_NB_LINE", nb_line_tMongoDBOutput_3);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out_2");
			  	}
			  	
 

ok_Hash.put("tMongoDBOutput_3", true);
end_Hash.put("tMongoDBOutput_3", System.currentTimeMillis());




/**
 * [tMongoDBOutput_3 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row5"); 
				     			
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
				try{
					
	
	/**
	 * [tMongoDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_1";

	

 



/**
 * [tMongoDBInput_1 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMongoDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tMongoDBOutput_3";

	
		if(resourceMap.get("finish_tMongoDBOutput_3") == null){
			if(resourceMap.get("mongo_tMongoDBOutput_3") != null){

			
		    
		    			
		    			       ((com.mongodb.MongoClient)resourceMap.get("mongo_tMongoDBOutput_3")).close();
		    
		    
			
			}
		}

 



/**
 * [tMongoDBOutput_3 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer semaine_max_du_mois_0_1;

				public Integer getSemaine_max_du_mois_0_1 () {
					return this.semaine_max_du_mois_0_1;
				}
				
			    public String code_region;

				public String getCode_region () {
					return this.code_region;
				}
				
			    public java.util.Date horodate;

				public java.util.Date getHorodate () {
					return this.horodate;
				}
				
			    public String plage_de_puissance_souscrite;

				public String getPlage_de_puissance_souscrite () {
					return this.plage_de_puissance_souscrite;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public Float indice_representativite_courbe_ndeg2;

				public Float getIndice_representativite_courbe_ndeg2 () {
					return this.indice_representativite_courbe_ndeg2;
				}
				
			    public Float indice_representativite_courbe_ndeg1;

				public Float getIndice_representativite_courbe_ndeg1 () {
					return this.indice_representativite_courbe_ndeg1;
				}
				
			    public String profil;

				public String getProfil () {
					return this.profil;
				}
				
			    public Float indice_representativite_courbe_ndeg1_ndeg2;

				public Float getIndice_representativite_courbe_ndeg1_ndeg2 () {
					return this.indice_representativite_courbe_ndeg1_ndeg2;
				}
				
			    public Integer jour_max_du_mois_0_1;

				public Integer getJour_max_du_mois_0_1 () {
					return this.jour_max_du_mois_0_1;
				}
				
			    public Integer nb_points_soutirage;

				public Integer getNb_points_soutirage () {
					return this.nb_points_soutirage;
				}
				
			    public Float total_energie_soutiree_wh;

				public Float getTotal_energie_soutiree_wh () {
					return this.total_energie_soutiree_wh;
				}
				
			    public Float courbe_moyenne_ndeg1_ndeg2_wh;

				public Float getCourbe_moyenne_ndeg1_ndeg2_wh () {
					return this.courbe_moyenne_ndeg1_ndeg2_wh;
				}
				
			    public Float courbe_moyenne_ndeg1_wh;

				public Float getCourbe_moyenne_ndeg1_wh () {
					return this.courbe_moyenne_ndeg1_wh;
				}
				
			    public Float courbe_moyenne_ndeg2_wh;

				public Float getCourbe_moyenne_ndeg2_wh () {
					return this.courbe_moyenne_ndeg2_wh;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.code_region == null) ? 0 : this.code_region.hashCode());
					
						result = prime * result + ((this.horodate == null) ? 0 : this.horodate.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.code_region == null) {
							if (other.code_region != null)
								return false;
						
						} else if (!this.code_region.equals(other.code_region))
						
							return false;
					
						if (this.horodate == null) {
							if (other.horodate != null)
								return false;
						
						} else if (!this.horodate.equals(other.horodate))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.semaine_max_du_mois_0_1 = this.semaine_max_du_mois_0_1;
	            other.code_region = this.code_region;
	            other.horodate = this.horodate;
	            other.plage_de_puissance_souscrite = this.plage_de_puissance_souscrite;
	            other.region = this.region;
	            other.indice_representativite_courbe_ndeg2 = this.indice_representativite_courbe_ndeg2;
	            other.indice_representativite_courbe_ndeg1 = this.indice_representativite_courbe_ndeg1;
	            other.profil = this.profil;
	            other.indice_representativite_courbe_ndeg1_ndeg2 = this.indice_representativite_courbe_ndeg1_ndeg2;
	            other.jour_max_du_mois_0_1 = this.jour_max_du_mois_0_1;
	            other.nb_points_soutirage = this.nb_points_soutirage;
	            other.total_energie_soutiree_wh = this.total_energie_soutiree_wh;
	            other.courbe_moyenne_ndeg1_ndeg2_wh = this.courbe_moyenne_ndeg1_ndeg2_wh;
	            other.courbe_moyenne_ndeg1_wh = this.courbe_moyenne_ndeg1_wh;
	            other.courbe_moyenne_ndeg2_wh = this.courbe_moyenne_ndeg2_wh;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.code_region = this.code_region;
	            	other.horodate = this.horodate;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2) {

        	try {

        		int length = 0;
		
					this.code_region = readString(dis);
					
					this.horodate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.code_region,dos);
					
					// java.util.Date
				
						writeDate(this.horodate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.semaine_max_du_mois_0_1 = readInteger(dis,ois);
					
						this.plage_de_puissance_souscrite = readString(dis,ois);
					
						this.region = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.indice_representativite_courbe_ndeg2 = null;
           				} else {
           			    	this.indice_representativite_courbe_ndeg2 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.indice_representativite_courbe_ndeg1 = null;
           				} else {
           			    	this.indice_representativite_courbe_ndeg1 = dis.readFloat();
           				}
					
						this.profil = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.indice_representativite_courbe_ndeg1_ndeg2 = null;
           				} else {
           			    	this.indice_representativite_courbe_ndeg1_ndeg2 = dis.readFloat();
           				}
					
						this.jour_max_du_mois_0_1 = readInteger(dis,ois);
					
						this.nb_points_soutirage = readInteger(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.total_energie_soutiree_wh = null;
           				} else {
           			    	this.total_energie_soutiree_wh = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.courbe_moyenne_ndeg1_ndeg2_wh = null;
           				} else {
           			    	this.courbe_moyenne_ndeg1_ndeg2_wh = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.courbe_moyenne_ndeg1_wh = null;
           				} else {
           			    	this.courbe_moyenne_ndeg1_wh = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.courbe_moyenne_ndeg2_wh = null;
           				} else {
           			    	this.courbe_moyenne_ndeg2_wh = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.semaine_max_du_mois_0_1, dos, oos);
					
						writeString(this.plage_de_puissance_souscrite, dos, oos);
					
						writeString(this.region, dos, oos);
					
						if(this.indice_representativite_courbe_ndeg2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.indice_representativite_courbe_ndeg2);
		            	}
					
						if(this.indice_representativite_courbe_ndeg1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.indice_representativite_courbe_ndeg1);
		            	}
					
						writeString(this.profil, dos, oos);
					
						if(this.indice_representativite_courbe_ndeg1_ndeg2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.indice_representativite_courbe_ndeg1_ndeg2);
		            	}
					
					writeInteger(this.jour_max_du_mois_0_1, dos, oos);
					
					writeInteger(this.nb_points_soutirage, dos, oos);
					
						if(this.total_energie_soutiree_wh == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.total_energie_soutiree_wh);
		            	}
					
						if(this.courbe_moyenne_ndeg1_ndeg2_wh == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.courbe_moyenne_ndeg1_ndeg2_wh);
		            	}
					
						if(this.courbe_moyenne_ndeg1_wh == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.courbe_moyenne_ndeg1_wh);
		            	}
					
						if(this.courbe_moyenne_ndeg2_wh == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.courbe_moyenne_ndeg2_wh);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("semaine_max_du_mois_0_1="+String.valueOf(semaine_max_du_mois_0_1));
		sb.append(",code_region="+code_region);
		sb.append(",horodate="+String.valueOf(horodate));
		sb.append(",plage_de_puissance_souscrite="+plage_de_puissance_souscrite);
		sb.append(",region="+region);
		sb.append(",indice_representativite_courbe_ndeg2="+String.valueOf(indice_representativite_courbe_ndeg2));
		sb.append(",indice_representativite_courbe_ndeg1="+String.valueOf(indice_representativite_courbe_ndeg1));
		sb.append(",profil="+profil);
		sb.append(",indice_representativite_courbe_ndeg1_ndeg2="+String.valueOf(indice_representativite_courbe_ndeg1_ndeg2));
		sb.append(",jour_max_du_mois_0_1="+String.valueOf(jour_max_du_mois_0_1));
		sb.append(",nb_points_soutirage="+String.valueOf(nb_points_soutirage));
		sb.append(",total_energie_soutiree_wh="+String.valueOf(total_energie_soutiree_wh));
		sb.append(",courbe_moyenne_ndeg1_ndeg2_wh="+String.valueOf(courbe_moyenne_ndeg1_ndeg2_wh));
		sb.append(",courbe_moyenne_ndeg1_wh="+String.valueOf(courbe_moyenne_ndeg1_wh));
		sb.append(",courbe_moyenne_ndeg2_wh="+String.valueOf(courbe_moyenne_ndeg2_wh));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.code_region, other.code_region);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.horodate, other.horodate);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];

	
			    public Integer semaine_max_du_mois_0_1;

				public Integer getSemaine_max_du_mois_0_1 () {
					return this.semaine_max_du_mois_0_1;
				}
				
			    public Integer code_region;

				public Integer getCode_region () {
					return this.code_region;
				}
				
			    public java.util.Date horodate;

				public java.util.Date getHorodate () {
					return this.horodate;
				}
				
			    public String plage_de_puissance_souscrite;

				public String getPlage_de_puissance_souscrite () {
					return this.plage_de_puissance_souscrite;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public String indice_representativite_courbe_ndeg2;

				public String getIndice_representativite_courbe_ndeg2 () {
					return this.indice_representativite_courbe_ndeg2;
				}
				
			    public String indice_representativite_courbe_ndeg1;

				public String getIndice_representativite_courbe_ndeg1 () {
					return this.indice_representativite_courbe_ndeg1;
				}
				
			    public String profil;

				public String getProfil () {
					return this.profil;
				}
				
			    public String indice_representativite_courbe_ndeg1_ndeg2;

				public String getIndice_representativite_courbe_ndeg1_ndeg2 () {
					return this.indice_representativite_courbe_ndeg1_ndeg2;
				}
				
			    public Integer jour_max_du_mois_0_1;

				public Integer getJour_max_du_mois_0_1 () {
					return this.jour_max_du_mois_0_1;
				}
				
			    public Integer nb_points_soutirage;

				public Integer getNb_points_soutirage () {
					return this.nb_points_soutirage;
				}
				
			    public String total_energie_soutiree_wh;

				public String getTotal_energie_soutiree_wh () {
					return this.total_energie_soutiree_wh;
				}
				
			    public String courbe_moyenne_ndeg1_ndeg2_wh;

				public String getCourbe_moyenne_ndeg1_ndeg2_wh () {
					return this.courbe_moyenne_ndeg1_ndeg2_wh;
				}
				
			    public String courbe_moyenne_ndeg1_wh;

				public String getCourbe_moyenne_ndeg1_wh () {
					return this.courbe_moyenne_ndeg1_wh;
				}
				
			    public String courbe_moyenne_ndeg2_wh;

				public String getCourbe_moyenne_ndeg2_wh () {
					return this.courbe_moyenne_ndeg2_wh;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2) {

        	try {

        		int length = 0;
		
						this.semaine_max_du_mois_0_1 = readInteger(dis);
					
						this.code_region = readInteger(dis);
					
					this.horodate = readDate(dis);
					
					this.plage_de_puissance_souscrite = readString(dis);
					
					this.region = readString(dis);
					
					this.indice_representativite_courbe_ndeg2 = readString(dis);
					
					this.indice_representativite_courbe_ndeg1 = readString(dis);
					
					this.profil = readString(dis);
					
					this.indice_representativite_courbe_ndeg1_ndeg2 = readString(dis);
					
						this.jour_max_du_mois_0_1 = readInteger(dis);
					
						this.nb_points_soutirage = readInteger(dis);
					
					this.total_energie_soutiree_wh = readString(dis);
					
					this.courbe_moyenne_ndeg1_ndeg2_wh = readString(dis);
					
					this.courbe_moyenne_ndeg1_wh = readString(dis);
					
					this.courbe_moyenne_ndeg2_wh = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.semaine_max_du_mois_0_1,dos);
					
					// Integer
				
						writeInteger(this.code_region,dos);
					
					// java.util.Date
				
						writeDate(this.horodate,dos);
					
					// String
				
						writeString(this.plage_de_puissance_souscrite,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// String
				
						writeString(this.indice_representativite_courbe_ndeg2,dos);
					
					// String
				
						writeString(this.indice_representativite_courbe_ndeg1,dos);
					
					// String
				
						writeString(this.profil,dos);
					
					// String
				
						writeString(this.indice_representativite_courbe_ndeg1_ndeg2,dos);
					
					// Integer
				
						writeInteger(this.jour_max_du_mois_0_1,dos);
					
					// Integer
				
						writeInteger(this.nb_points_soutirage,dos);
					
					// String
				
						writeString(this.total_energie_soutiree_wh,dos);
					
					// String
				
						writeString(this.courbe_moyenne_ndeg1_ndeg2_wh,dos);
					
					// String
				
						writeString(this.courbe_moyenne_ndeg1_wh,dos);
					
					// String
				
						writeString(this.courbe_moyenne_ndeg2_wh,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("semaine_max_du_mois_0_1="+String.valueOf(semaine_max_du_mois_0_1));
		sb.append(",code_region="+String.valueOf(code_region));
		sb.append(",horodate="+String.valueOf(horodate));
		sb.append(",plage_de_puissance_souscrite="+plage_de_puissance_souscrite);
		sb.append(",region="+region);
		sb.append(",indice_representativite_courbe_ndeg2="+indice_representativite_courbe_ndeg2);
		sb.append(",indice_representativite_courbe_ndeg1="+indice_representativite_courbe_ndeg1);
		sb.append(",profil="+profil);
		sb.append(",indice_representativite_courbe_ndeg1_ndeg2="+indice_representativite_courbe_ndeg1_ndeg2);
		sb.append(",jour_max_du_mois_0_1="+String.valueOf(jour_max_du_mois_0_1));
		sb.append(",nb_points_soutirage="+String.valueOf(nb_points_soutirage));
		sb.append(",total_energie_soutiree_wh="+total_energie_soutiree_wh);
		sb.append(",courbe_moyenne_ndeg1_ndeg2_wh="+courbe_moyenne_ndeg1_ndeg2_wh);
		sb.append(",courbe_moyenne_ndeg1_wh="+courbe_moyenne_ndeg1_wh);
		sb.append(",courbe_moyenne_ndeg2_wh="+courbe_moyenne_ndeg2_wh);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];

	
			    public Integer semaine_max_du_mois_0_1;

				public Integer getSemaine_max_du_mois_0_1 () {
					return this.semaine_max_du_mois_0_1;
				}
				
			    public Integer code_region;

				public Integer getCode_region () {
					return this.code_region;
				}
				
			    public java.util.Date horodate;

				public java.util.Date getHorodate () {
					return this.horodate;
				}
				
			    public String plage_de_puissance_souscrite;

				public String getPlage_de_puissance_souscrite () {
					return this.plage_de_puissance_souscrite;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public String indice_representativite_courbe_ndeg2;

				public String getIndice_representativite_courbe_ndeg2 () {
					return this.indice_representativite_courbe_ndeg2;
				}
				
			    public String indice_representativite_courbe_ndeg1;

				public String getIndice_representativite_courbe_ndeg1 () {
					return this.indice_representativite_courbe_ndeg1;
				}
				
			    public String profil;

				public String getProfil () {
					return this.profil;
				}
				
			    public String indice_representativite_courbe_ndeg1_ndeg2;

				public String getIndice_representativite_courbe_ndeg1_ndeg2 () {
					return this.indice_representativite_courbe_ndeg1_ndeg2;
				}
				
			    public Integer jour_max_du_mois_0_1;

				public Integer getJour_max_du_mois_0_1 () {
					return this.jour_max_du_mois_0_1;
				}
				
			    public Integer nb_points_soutirage;

				public Integer getNb_points_soutirage () {
					return this.nb_points_soutirage;
				}
				
			    public String total_energie_soutiree_wh;

				public String getTotal_energie_soutiree_wh () {
					return this.total_energie_soutiree_wh;
				}
				
			    public String courbe_moyenne_ndeg1_ndeg2_wh;

				public String getCourbe_moyenne_ndeg1_ndeg2_wh () {
					return this.courbe_moyenne_ndeg1_ndeg2_wh;
				}
				
			    public String courbe_moyenne_ndeg1_wh;

				public String getCourbe_moyenne_ndeg1_wh () {
					return this.courbe_moyenne_ndeg1_wh;
				}
				
			    public String courbe_moyenne_ndeg2_wh;

				public String getCourbe_moyenne_ndeg2_wh () {
					return this.courbe_moyenne_ndeg2_wh;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2) {

        	try {

        		int length = 0;
		
						this.semaine_max_du_mois_0_1 = readInteger(dis);
					
						this.code_region = readInteger(dis);
					
					this.horodate = readDate(dis);
					
					this.plage_de_puissance_souscrite = readString(dis);
					
					this.region = readString(dis);
					
					this.indice_representativite_courbe_ndeg2 = readString(dis);
					
					this.indice_representativite_courbe_ndeg1 = readString(dis);
					
					this.profil = readString(dis);
					
					this.indice_representativite_courbe_ndeg1_ndeg2 = readString(dis);
					
						this.jour_max_du_mois_0_1 = readInteger(dis);
					
						this.nb_points_soutirage = readInteger(dis);
					
					this.total_energie_soutiree_wh = readString(dis);
					
					this.courbe_moyenne_ndeg1_ndeg2_wh = readString(dis);
					
					this.courbe_moyenne_ndeg1_wh = readString(dis);
					
					this.courbe_moyenne_ndeg2_wh = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.semaine_max_du_mois_0_1,dos);
					
					// Integer
				
						writeInteger(this.code_region,dos);
					
					// java.util.Date
				
						writeDate(this.horodate,dos);
					
					// String
				
						writeString(this.plage_de_puissance_souscrite,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// String
				
						writeString(this.indice_representativite_courbe_ndeg2,dos);
					
					// String
				
						writeString(this.indice_representativite_courbe_ndeg1,dos);
					
					// String
				
						writeString(this.profil,dos);
					
					// String
				
						writeString(this.indice_representativite_courbe_ndeg1_ndeg2,dos);
					
					// Integer
				
						writeInteger(this.jour_max_du_mois_0_1,dos);
					
					// Integer
				
						writeInteger(this.nb_points_soutirage,dos);
					
					// String
				
						writeString(this.total_energie_soutiree_wh,dos);
					
					// String
				
						writeString(this.courbe_moyenne_ndeg1_ndeg2_wh,dos);
					
					// String
				
						writeString(this.courbe_moyenne_ndeg1_wh,dos);
					
					// String
				
						writeString(this.courbe_moyenne_ndeg2_wh,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("semaine_max_du_mois_0_1="+String.valueOf(semaine_max_du_mois_0_1));
		sb.append(",code_region="+String.valueOf(code_region));
		sb.append(",horodate="+String.valueOf(horodate));
		sb.append(",plage_de_puissance_souscrite="+plage_de_puissance_souscrite);
		sb.append(",region="+region);
		sb.append(",indice_representativite_courbe_ndeg2="+indice_representativite_courbe_ndeg2);
		sb.append(",indice_representativite_courbe_ndeg1="+indice_representativite_courbe_ndeg1);
		sb.append(",profil="+profil);
		sb.append(",indice_representativite_courbe_ndeg1_ndeg2="+indice_representativite_courbe_ndeg1_ndeg2);
		sb.append(",jour_max_du_mois_0_1="+String.valueOf(jour_max_du_mois_0_1));
		sb.append(",nb_points_soutirage="+String.valueOf(nb_points_soutirage));
		sb.append(",total_energie_soutiree_wh="+total_energie_soutiree_wh);
		sb.append(",courbe_moyenne_ndeg1_ndeg2_wh="+courbe_moyenne_ndeg1_ndeg2_wh);
		sb.append(",courbe_moyenne_ndeg1_wh="+courbe_moyenne_ndeg1_wh);
		sb.append(",courbe_moyenne_ndeg2_wh="+courbe_moyenne_ndeg2_wh);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class mongo_outStruct implements routines.system.IPersistableRow<mongo_outStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];

	
			    public Integer semaine_max_du_mois_0_1;

				public Integer getSemaine_max_du_mois_0_1 () {
					return this.semaine_max_du_mois_0_1;
				}
				
			    public Integer code_region;

				public Integer getCode_region () {
					return this.code_region;
				}
				
			    public java.util.Date horodate;

				public java.util.Date getHorodate () {
					return this.horodate;
				}
				
			    public String plage_de_puissance_souscrite;

				public String getPlage_de_puissance_souscrite () {
					return this.plage_de_puissance_souscrite;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public String indice_representativite_courbe_ndeg2;

				public String getIndice_representativite_courbe_ndeg2 () {
					return this.indice_representativite_courbe_ndeg2;
				}
				
			    public String indice_representativite_courbe_ndeg1;

				public String getIndice_representativite_courbe_ndeg1 () {
					return this.indice_representativite_courbe_ndeg1;
				}
				
			    public String profil;

				public String getProfil () {
					return this.profil;
				}
				
			    public String indice_representativite_courbe_ndeg1_ndeg2;

				public String getIndice_representativite_courbe_ndeg1_ndeg2 () {
					return this.indice_representativite_courbe_ndeg1_ndeg2;
				}
				
			    public Integer jour_max_du_mois_0_1;

				public Integer getJour_max_du_mois_0_1 () {
					return this.jour_max_du_mois_0_1;
				}
				
			    public Integer nb_points_soutirage;

				public Integer getNb_points_soutirage () {
					return this.nb_points_soutirage;
				}
				
			    public String total_energie_soutiree_wh;

				public String getTotal_energie_soutiree_wh () {
					return this.total_energie_soutiree_wh;
				}
				
			    public String courbe_moyenne_ndeg1_ndeg2_wh;

				public String getCourbe_moyenne_ndeg1_ndeg2_wh () {
					return this.courbe_moyenne_ndeg1_ndeg2_wh;
				}
				
			    public String courbe_moyenne_ndeg1_wh;

				public String getCourbe_moyenne_ndeg1_wh () {
					return this.courbe_moyenne_ndeg1_wh;
				}
				
			    public String courbe_moyenne_ndeg2_wh;

				public String getCourbe_moyenne_ndeg2_wh () {
					return this.courbe_moyenne_ndeg2_wh;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2) {

        	try {

        		int length = 0;
		
						this.semaine_max_du_mois_0_1 = readInteger(dis);
					
						this.code_region = readInteger(dis);
					
					this.horodate = readDate(dis);
					
					this.plage_de_puissance_souscrite = readString(dis);
					
					this.region = readString(dis);
					
					this.indice_representativite_courbe_ndeg2 = readString(dis);
					
					this.indice_representativite_courbe_ndeg1 = readString(dis);
					
					this.profil = readString(dis);
					
					this.indice_representativite_courbe_ndeg1_ndeg2 = readString(dis);
					
						this.jour_max_du_mois_0_1 = readInteger(dis);
					
						this.nb_points_soutirage = readInteger(dis);
					
					this.total_energie_soutiree_wh = readString(dis);
					
					this.courbe_moyenne_ndeg1_ndeg2_wh = readString(dis);
					
					this.courbe_moyenne_ndeg1_wh = readString(dis);
					
					this.courbe_moyenne_ndeg2_wh = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.semaine_max_du_mois_0_1,dos);
					
					// Integer
				
						writeInteger(this.code_region,dos);
					
					// java.util.Date
				
						writeDate(this.horodate,dos);
					
					// String
				
						writeString(this.plage_de_puissance_souscrite,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// String
				
						writeString(this.indice_representativite_courbe_ndeg2,dos);
					
					// String
				
						writeString(this.indice_representativite_courbe_ndeg1,dos);
					
					// String
				
						writeString(this.profil,dos);
					
					// String
				
						writeString(this.indice_representativite_courbe_ndeg1_ndeg2,dos);
					
					// Integer
				
						writeInteger(this.jour_max_du_mois_0_1,dos);
					
					// Integer
				
						writeInteger(this.nb_points_soutirage,dos);
					
					// String
				
						writeString(this.total_energie_soutiree_wh,dos);
					
					// String
				
						writeString(this.courbe_moyenne_ndeg1_ndeg2_wh,dos);
					
					// String
				
						writeString(this.courbe_moyenne_ndeg1_wh,dos);
					
					// String
				
						writeString(this.courbe_moyenne_ndeg2_wh,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("semaine_max_du_mois_0_1="+String.valueOf(semaine_max_du_mois_0_1));
		sb.append(",code_region="+String.valueOf(code_region));
		sb.append(",horodate="+String.valueOf(horodate));
		sb.append(",plage_de_puissance_souscrite="+plage_de_puissance_souscrite);
		sb.append(",region="+region);
		sb.append(",indice_representativite_courbe_ndeg2="+indice_representativite_courbe_ndeg2);
		sb.append(",indice_representativite_courbe_ndeg1="+indice_representativite_courbe_ndeg1);
		sb.append(",profil="+profil);
		sb.append(",indice_representativite_courbe_ndeg1_ndeg2="+indice_representativite_courbe_ndeg1_ndeg2);
		sb.append(",jour_max_du_mois_0_1="+String.valueOf(jour_max_du_mois_0_1));
		sb.append(",nb_points_soutirage="+String.valueOf(nb_points_soutirage));
		sb.append(",total_energie_soutiree_wh="+total_energie_soutiree_wh);
		sb.append(",courbe_moyenne_ndeg1_ndeg2_wh="+courbe_moyenne_ndeg1_ndeg2_wh);
		sb.append(",courbe_moyenne_ndeg1_wh="+courbe_moyenne_ndeg1_wh);
		sb.append(",courbe_moyenne_ndeg2_wh="+courbe_moyenne_ndeg2_wh);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mongo_outStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[0];

	
			    public Integer semaine_max_du_mois_0_1;

				public Integer getSemaine_max_du_mois_0_1 () {
					return this.semaine_max_du_mois_0_1;
				}
				
			    public Integer code_region;

				public Integer getCode_region () {
					return this.code_region;
				}
				
			    public String horodate;

				public String getHorodate () {
					return this.horodate;
				}
				
			    public String plage_de_puissance_souscrite;

				public String getPlage_de_puissance_souscrite () {
					return this.plage_de_puissance_souscrite;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public String indice_representativite_courbe_ndeg2;

				public String getIndice_representativite_courbe_ndeg2 () {
					return this.indice_representativite_courbe_ndeg2;
				}
				
			    public String indice_representativite_courbe_ndeg1;

				public String getIndice_representativite_courbe_ndeg1 () {
					return this.indice_representativite_courbe_ndeg1;
				}
				
			    public String profil;

				public String getProfil () {
					return this.profil;
				}
				
			    public String indice_representativite_courbe_ndeg1_ndeg2;

				public String getIndice_representativite_courbe_ndeg1_ndeg2 () {
					return this.indice_representativite_courbe_ndeg1_ndeg2;
				}
				
			    public Integer jour_max_du_mois_0_1;

				public Integer getJour_max_du_mois_0_1 () {
					return this.jour_max_du_mois_0_1;
				}
				
			    public Integer nb_points_soutirage;

				public Integer getNb_points_soutirage () {
					return this.nb_points_soutirage;
				}
				
			    public String total_energie_soutiree_wh;

				public String getTotal_energie_soutiree_wh () {
					return this.total_energie_soutiree_wh;
				}
				
			    public String courbe_moyenne_ndeg1_ndeg2_wh;

				public String getCourbe_moyenne_ndeg1_ndeg2_wh () {
					return this.courbe_moyenne_ndeg1_ndeg2_wh;
				}
				
			    public String courbe_moyenne_ndeg1_wh;

				public String getCourbe_moyenne_ndeg1_wh () {
					return this.courbe_moyenne_ndeg1_wh;
				}
				
			    public String courbe_moyenne_ndeg2_wh;

				public String getCourbe_moyenne_ndeg2_wh () {
					return this.courbe_moyenne_ndeg2_wh;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2.length == 0) {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_Job_merge_enedis_v2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_Job_merge_enedis_v2) {

        	try {

        		int length = 0;
		
						this.semaine_max_du_mois_0_1 = readInteger(dis);
					
						this.code_region = readInteger(dis);
					
					this.horodate = readString(dis);
					
					this.plage_de_puissance_souscrite = readString(dis);
					
					this.region = readString(dis);
					
					this.indice_representativite_courbe_ndeg2 = readString(dis);
					
					this.indice_representativite_courbe_ndeg1 = readString(dis);
					
					this.profil = readString(dis);
					
					this.indice_representativite_courbe_ndeg1_ndeg2 = readString(dis);
					
						this.jour_max_du_mois_0_1 = readInteger(dis);
					
						this.nb_points_soutirage = readInteger(dis);
					
					this.total_energie_soutiree_wh = readString(dis);
					
					this.courbe_moyenne_ndeg1_ndeg2_wh = readString(dis);
					
					this.courbe_moyenne_ndeg1_wh = readString(dis);
					
					this.courbe_moyenne_ndeg2_wh = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.semaine_max_du_mois_0_1,dos);
					
					// Integer
				
						writeInteger(this.code_region,dos);
					
					// String
				
						writeString(this.horodate,dos);
					
					// String
				
						writeString(this.plage_de_puissance_souscrite,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// String
				
						writeString(this.indice_representativite_courbe_ndeg2,dos);
					
					// String
				
						writeString(this.indice_representativite_courbe_ndeg1,dos);
					
					// String
				
						writeString(this.profil,dos);
					
					// String
				
						writeString(this.indice_representativite_courbe_ndeg1_ndeg2,dos);
					
					// Integer
				
						writeInteger(this.jour_max_du_mois_0_1,dos);
					
					// Integer
				
						writeInteger(this.nb_points_soutirage,dos);
					
					// String
				
						writeString(this.total_energie_soutiree_wh,dos);
					
					// String
				
						writeString(this.courbe_moyenne_ndeg1_ndeg2_wh,dos);
					
					// String
				
						writeString(this.courbe_moyenne_ndeg1_wh,dos);
					
					// String
				
						writeString(this.courbe_moyenne_ndeg2_wh,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("semaine_max_du_mois_0_1="+String.valueOf(semaine_max_du_mois_0_1));
		sb.append(",code_region="+String.valueOf(code_region));
		sb.append(",horodate="+horodate);
		sb.append(",plage_de_puissance_souscrite="+plage_de_puissance_souscrite);
		sb.append(",region="+region);
		sb.append(",indice_representativite_courbe_ndeg2="+indice_representativite_courbe_ndeg2);
		sb.append(",indice_representativite_courbe_ndeg1="+indice_representativite_courbe_ndeg1);
		sb.append(",profil="+profil);
		sb.append(",indice_representativite_courbe_ndeg1_ndeg2="+indice_representativite_courbe_ndeg1_ndeg2);
		sb.append(",jour_max_du_mois_0_1="+String.valueOf(jour_max_du_mois_0_1));
		sb.append(",nb_points_soutirage="+String.valueOf(nb_points_soutirage));
		sb.append(",total_energie_soutiree_wh="+total_energie_soutiree_wh);
		sb.append(",courbe_moyenne_ndeg1_ndeg2_wh="+courbe_moyenne_ndeg1_ndeg2_wh);
		sb.append(",courbe_moyenne_ndeg1_wh="+courbe_moyenne_ndeg1_wh);
		sb.append(",courbe_moyenne_ndeg2_wh="+courbe_moyenne_ndeg2_wh);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputJSON_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputJSON_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
mongo_outStruct mongo_out = new mongo_outStruct();
row6Struct row6 = new row6Struct();
row3Struct row3 = new row3Struct();
row5Struct row5 = new row5Struct();








	
	/**
	 * [tAdvancedHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row5", false);
		start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tAdvancedHash_row5 = 0;
		

			   		// connection name:row5
			   		// source node:tConvertType_1 - inputs:(row3) outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
			   		// linked node: tMap_2 - inputs:(row4,row5) outputs:(out_2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row5Struct>getLookup(matchingModeEnum_row5);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row5 begin ] stop
 */



	
	/**
	 * [tConvertType_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_1", false);
		start_Hash.put("tConvertType_1", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tConvertType_1 = 0;
		
	int nb_line_tConvertType_1 = 0;  
 



/**
 * [tConvertType_1 begin ] stop
 */



	
	/**
	 * [tReplace_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplace_1", false);
		start_Hash.put("tReplace_1", System.currentTimeMillis());
		
	
	currentComponent="tReplace_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tReplace_1 = 0;
		


int nb_line_tReplace_1 = 0;
 



/**
 * [tReplace_1 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"mongo_out");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
mongo_outStruct mongo_out_tmp = new mongo_outStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputJSON_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputJSON_1", false);
		start_Hash.put("tFileInputJSON_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputJSON_1";

	
		int tos_count_tFileInputJSON_1 = 0;
		

	
class JsonPathCache_tFileInputJSON_1 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

int nb_line_tFileInputJSON_1 = 0;

JsonPathCache_tFileInputJSON_1 jsonPathCache_tFileInputJSON_1 = new JsonPathCache_tFileInputJSON_1();

String loopPath_tFileInputJSON_1 = "$[*]";
java.util.List<Object> resultset_tFileInputJSON_1 = new java.util.ArrayList<Object>();

java.io.InputStream is_tFileInputJSON_1 = null;
com.jayway.jsonpath.ParseContext parseContext_tFileInputJSON_1 = com.jayway.jsonpath.JsonPath.using(com.jayway.jsonpath.Configuration.defaultConfiguration());
Object filenameOrStream_tFileInputJSON_1 = null;
        try {
            filenameOrStream_tFileInputJSON_1 = "/home/fitec/projet_fil_rouge/source_des_données/data/consommation_elec_regions_2019_150k.json";
        } catch(java.lang.Exception e_tFileInputJSON_1) {
				
	            System.err.println(e_tFileInputJSON_1.getMessage());
        }
        
com.jayway.jsonpath.ReadContext document_tFileInputJSON_1 = null;
try {
     if(filenameOrStream_tFileInputJSON_1 instanceof java.io.InputStream){
         is_tFileInputJSON_1 = (java.io.InputStream)filenameOrStream_tFileInputJSON_1;
     }else{
	    
	        is_tFileInputJSON_1 = new java.io.FileInputStream((String)filenameOrStream_tFileInputJSON_1);
	    
	 }
	
	
	document_tFileInputJSON_1 = parseContext_tFileInputJSON_1.parse(is_tFileInputJSON_1,"UTF-8");
	com.jayway.jsonpath.JsonPath compiledLoopPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(loopPath_tFileInputJSON_1);
	Object result_tFileInputJSON_1 = document_tFileInputJSON_1.read(compiledLoopPath_tFileInputJSON_1,net.minidev.json.JSONObject.class);
	if (result_tFileInputJSON_1 instanceof net.minidev.json.JSONArray) {
		resultset_tFileInputJSON_1 = (net.minidev.json.JSONArray) result_tFileInputJSON_1;
	} else {
		resultset_tFileInputJSON_1.add(result_tFileInputJSON_1);
	}
} catch (java.lang.Exception e_tFileInputJSON_1) {
	System.err.println(e_tFileInputJSON_1.getMessage());
} finally {
	if(is_tFileInputJSON_1 != null) {
		is_tFileInputJSON_1.close();
	}
}

String jsonPath_tFileInputJSON_1 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tFileInputJSON_1 = null;

Object value_tFileInputJSON_1 = null;
Object root_tFileInputJSON_1 = null;
for(Object row_tFileInputJSON_1 : resultset_tFileInputJSON_1) {
	nb_line_tFileInputJSON_1++;
			row1 = null;			
	boolean whetherReject_tFileInputJSON_1 = false;
	row1 = new row1Struct();
	
	try{
				jsonPath_tFileInputJSON_1 = "fields.semaine_max_du_mois_0_1";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row1.semaine_max_du_mois_0_1 = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row1.semaine_max_du_mois_0_1 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.semaine_max_du_mois_0_1 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "fields.code_region";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row1.code_region = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row1.code_region = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.code_region = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "fields.horodate";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row1.horodate = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.horodate = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "fields.plage_de_puissance_souscrite";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row1.plage_de_puissance_souscrite = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.plage_de_puissance_souscrite = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "fields.region";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row1.region = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.region = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "fields.indice_representativite_courbe_ndeg2";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row1.indice_representativite_courbe_ndeg2 = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.indice_representativite_courbe_ndeg2 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "fields.indice_representativite_courbe_ndeg1";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row1.indice_representativite_courbe_ndeg1 = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.indice_representativite_courbe_ndeg1 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "fields.profil";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row1.profil = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.profil = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "fields.indice_representativite_courbe_ndeg1_ndeg2";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row1.indice_representativite_courbe_ndeg1_ndeg2 = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.indice_representativite_courbe_ndeg1_ndeg2 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "fields.jour_max_du_mois_0_1";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row1.jour_max_du_mois_0_1 = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row1.jour_max_du_mois_0_1 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.jour_max_du_mois_0_1 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "fields.nb_points_soutirage";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row1.nb_points_soutirage = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row1.nb_points_soutirage = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.nb_points_soutirage = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "fields.total_energie_soutiree_wh";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row1.total_energie_soutiree_wh = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.total_energie_soutiree_wh = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "fields.courbe_moyenne_ndeg1_ndeg2_wh";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row1.courbe_moyenne_ndeg1_ndeg2_wh = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.courbe_moyenne_ndeg1_ndeg2_wh = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "fields.courbe_moyenne_ndeg1_wh";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row1.courbe_moyenne_ndeg1_wh = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.courbe_moyenne_ndeg1_wh = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "fields.courbe_moyenne_ndeg2_wh";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row1.courbe_moyenne_ndeg2_wh = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.courbe_moyenne_ndeg2_wh = 

		null
;
				}				
    } catch (java.lang.Exception e_tFileInputJSON_1) {
        whetherReject_tFileInputJSON_1 = true;
                System.err.println(e_tFileInputJSON_1.getMessage());
                row1 = null;
    }
//}

 



/**
 * [tFileInputJSON_1 begin ] stop
 */
	
	/**
	 * [tFileInputJSON_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

 


	tos_count_tFileInputJSON_1++;

/**
 * [tFileInputJSON_1 main ] stop
 */
	
	/**
	 * [tFileInputJSON_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

 



/**
 * [tFileInputJSON_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

mongo_out = null;


// # Output table : 'mongo_out'
mongo_out_tmp.semaine_max_du_mois_0_1 = row1.semaine_max_du_mois_0_1 ;
mongo_out_tmp.code_region = row1.code_region ;
mongo_out_tmp.horodate = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",row1.horodate) ;
mongo_out_tmp.plage_de_puissance_souscrite = row1.plage_de_puissance_souscrite ;
mongo_out_tmp.region = row1.region ;
mongo_out_tmp.indice_representativite_courbe_ndeg2 = row1.indice_representativite_courbe_ndeg2 ;
mongo_out_tmp.indice_representativite_courbe_ndeg1 = row1.indice_representativite_courbe_ndeg1 ;
mongo_out_tmp.profil = row1.profil ;
mongo_out_tmp.indice_representativite_courbe_ndeg1_ndeg2 = row1.indice_representativite_courbe_ndeg1_ndeg2 ;
mongo_out_tmp.jour_max_du_mois_0_1 = row1.jour_max_du_mois_0_1 ;
mongo_out_tmp.nb_points_soutirage = row1.nb_points_soutirage ;
mongo_out_tmp.total_energie_soutiree_wh = row1.total_energie_soutiree_wh ;
mongo_out_tmp.courbe_moyenne_ndeg1_ndeg2_wh = row1.courbe_moyenne_ndeg1_ndeg2_wh ;
mongo_out_tmp.courbe_moyenne_ndeg1_wh = row1.courbe_moyenne_ndeg1_wh ;
mongo_out_tmp.courbe_moyenne_ndeg2_wh = row1.courbe_moyenne_ndeg2_wh ;
mongo_out = mongo_out_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "mongo_out"
if(mongo_out != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"mongo_out"
						
						);
					}
					

          row6 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row6 == null){ 
                row6 = new row6Struct();
              }
               row6.semaine_max_du_mois_0_1 = mongo_out.semaine_max_du_mois_0_1;
               row6.code_region = mongo_out.code_region;
               row6.horodate = mongo_out.horodate;
               row6.plage_de_puissance_souscrite = mongo_out.plage_de_puissance_souscrite;
               row6.region = mongo_out.region;
               row6.indice_representativite_courbe_ndeg2 = mongo_out.indice_representativite_courbe_ndeg2;
               row6.indice_representativite_courbe_ndeg1 = mongo_out.indice_representativite_courbe_ndeg1;
               row6.profil = mongo_out.profil;
               row6.indice_representativite_courbe_ndeg1_ndeg2 = mongo_out.indice_representativite_courbe_ndeg1_ndeg2;
               row6.jour_max_du_mois_0_1 = mongo_out.jour_max_du_mois_0_1;
               row6.nb_points_soutirage = mongo_out.nb_points_soutirage;
               row6.total_energie_soutiree_wh = mongo_out.total_energie_soutiree_wh;
               row6.courbe_moyenne_ndeg1_ndeg2_wh = mongo_out.courbe_moyenne_ndeg1_ndeg2_wh;
               row6.courbe_moyenne_ndeg1_wh = mongo_out.courbe_moyenne_ndeg1_wh;
               row6.courbe_moyenne_ndeg2_wh = mongo_out.courbe_moyenne_ndeg2_wh;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tReplace_1 main ] start
	 */

	

	
	
	currentComponent="tReplace_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

						String searchStr_tReplace_1_1 = "S" + "";
							row6.indice_representativite_courbe_ndeg2 = StringUtils.replaceAllStrictly(row6.indice_representativite_courbe_ndeg2, searchStr_tReplace_1_1, "" + "", true, false);
						String searchStr_tReplace_1_2 = "S" + "";
							row6.indice_representativite_courbe_ndeg1 = StringUtils.replaceAllStrictly(row6.indice_representativite_courbe_ndeg1, searchStr_tReplace_1_2, "" + "", true, false);
						String searchStr_tReplace_1_3 = "S" + "";
							row6.indice_representativite_courbe_ndeg1_ndeg2 = StringUtils.replaceAllStrictly(row6.indice_representativite_courbe_ndeg1_ndeg2, searchStr_tReplace_1_3, "" + "", true, false);
						String searchStr_tReplace_1_4 = "< 1" + "";
							row6.indice_representativite_courbe_ndeg2 = StringUtils.replaceAllStrictly(row6.indice_representativite_courbe_ndeg2, searchStr_tReplace_1_4, "0" + "", true, false);
						String searchStr_tReplace_1_5 = "< 1" + "";
							row6.indice_representativite_courbe_ndeg1 = StringUtils.replaceAllStrictly(row6.indice_representativite_courbe_ndeg1, searchStr_tReplace_1_5, "0" + "", true, false);
						String searchStr_tReplace_1_6 = "< 1" + "";
							row6.indice_representativite_courbe_ndeg1_ndeg2 = StringUtils.replaceAllStrictly(row6.indice_representativite_courbe_ndeg1_ndeg2, searchStr_tReplace_1_6, "0" + "", true, false);
	        row3.semaine_max_du_mois_0_1 = row6.semaine_max_du_mois_0_1;
	        
	        row3.code_region = row6.code_region;
	        
	        row3.horodate = row6.horodate;
	        
	        row3.plage_de_puissance_souscrite = row6.plage_de_puissance_souscrite;
	        
	        row3.region = row6.region;
	        
	        row3.indice_representativite_courbe_ndeg2 = row6.indice_representativite_courbe_ndeg2;
	        
	        row3.indice_representativite_courbe_ndeg1 = row6.indice_representativite_courbe_ndeg1;
	        
	        row3.profil = row6.profil;
	        
	        row3.indice_representativite_courbe_ndeg1_ndeg2 = row6.indice_representativite_courbe_ndeg1_ndeg2;
	        
	        row3.jour_max_du_mois_0_1 = row6.jour_max_du_mois_0_1;
	        
	        row3.nb_points_soutirage = row6.nb_points_soutirage;
	        
	        row3.total_energie_soutiree_wh = row6.total_energie_soutiree_wh;
	        
	        row3.courbe_moyenne_ndeg1_ndeg2_wh = row6.courbe_moyenne_ndeg1_ndeg2_wh;
	        
	        row3.courbe_moyenne_ndeg1_wh = row6.courbe_moyenne_ndeg1_wh;
	        
	        row3.courbe_moyenne_ndeg2_wh = row6.courbe_moyenne_ndeg2_wh;
	        
    nb_line_tReplace_1++;

 


	tos_count_tReplace_1++;

/**
 * [tReplace_1 main ] stop
 */
	
	/**
	 * [tReplace_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplace_1";

	

 



/**
 * [tReplace_1 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_1 main ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


  row5 = new row5Struct();
  boolean bHasError_tConvertType_1 = false;             
          try {
              row5.semaine_max_du_mois_0_1=TypeConvert.Integer2Integer(row3.semaine_max_du_mois_0_1);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row5.code_region=TypeConvert.Integer2String(row3.code_region);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row5.horodate=TypeConvert.Date2Date(row3.horodate);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(row3.plage_de_puissance_souscrite)){  
                row3.plage_de_puissance_souscrite = null;
              }
              row5.plage_de_puissance_souscrite=TypeConvert.String2String(row3.plage_de_puissance_souscrite);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(row3.region)){  
                row3.region = null;
              }
              row5.region=TypeConvert.String2String(row3.region);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(row3.indice_representativite_courbe_ndeg2)){  
                row3.indice_representativite_courbe_ndeg2 = null;
              }
              row5.indice_representativite_courbe_ndeg2=TypeConvert.String2Float(row3.indice_representativite_courbe_ndeg2);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(row3.indice_representativite_courbe_ndeg1)){  
                row3.indice_representativite_courbe_ndeg1 = null;
              }
              row5.indice_representativite_courbe_ndeg1=TypeConvert.String2Float(row3.indice_representativite_courbe_ndeg1);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(row3.profil)){  
                row3.profil = null;
              }
              row5.profil=TypeConvert.String2String(row3.profil);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(row3.indice_representativite_courbe_ndeg1_ndeg2)){  
                row3.indice_representativite_courbe_ndeg1_ndeg2 = null;
              }
              row5.indice_representativite_courbe_ndeg1_ndeg2=TypeConvert.String2Float(row3.indice_representativite_courbe_ndeg1_ndeg2);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row5.jour_max_du_mois_0_1=TypeConvert.Integer2Integer(row3.jour_max_du_mois_0_1);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row5.nb_points_soutirage=TypeConvert.Integer2Integer(row3.nb_points_soutirage);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(row3.total_energie_soutiree_wh)){  
                row3.total_energie_soutiree_wh = null;
              }
              row5.total_energie_soutiree_wh=TypeConvert.String2Float(row3.total_energie_soutiree_wh);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(row3.courbe_moyenne_ndeg1_ndeg2_wh)){  
                row3.courbe_moyenne_ndeg1_ndeg2_wh = null;
              }
              row5.courbe_moyenne_ndeg1_ndeg2_wh=TypeConvert.String2Float(row3.courbe_moyenne_ndeg1_ndeg2_wh);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(row3.courbe_moyenne_ndeg1_wh)){  
                row3.courbe_moyenne_ndeg1_wh = null;
              }
              row5.courbe_moyenne_ndeg1_wh=TypeConvert.String2Float(row3.courbe_moyenne_ndeg1_wh);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              if ("".equals(row3.courbe_moyenne_ndeg2_wh)){  
                row3.courbe_moyenne_ndeg2_wh = null;
              }
              row5.courbe_moyenne_ndeg2_wh=TypeConvert.String2Float(row3.courbe_moyenne_ndeg2_wh);            
          } catch(java.lang.Exception e){
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_1) {row5 = null;}

  nb_line_tConvertType_1 ++ ;
 


	tos_count_tConvertType_1++;

/**
 * [tConvertType_1 main ] stop
 */
	
	/**
	 * [tConvertType_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	

 



/**
 * [tConvertType_1 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tAdvancedHash_row5 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					


			   
			   

					row5Struct row5_HashRow = new row5Struct();
		   	   	   
				
				row5_HashRow.semaine_max_du_mois_0_1 = row5.semaine_max_du_mois_0_1;
				
				row5_HashRow.code_region = row5.code_region;
				
				row5_HashRow.horodate = row5.horodate;
				
				row5_HashRow.plage_de_puissance_souscrite = row5.plage_de_puissance_souscrite;
				
				row5_HashRow.region = row5.region;
				
				row5_HashRow.indice_representativite_courbe_ndeg2 = row5.indice_representativite_courbe_ndeg2;
				
				row5_HashRow.indice_representativite_courbe_ndeg1 = row5.indice_representativite_courbe_ndeg1;
				
				row5_HashRow.profil = row5.profil;
				
				row5_HashRow.indice_representativite_courbe_ndeg1_ndeg2 = row5.indice_representativite_courbe_ndeg1_ndeg2;
				
				row5_HashRow.jour_max_du_mois_0_1 = row5.jour_max_du_mois_0_1;
				
				row5_HashRow.nb_points_soutirage = row5.nb_points_soutirage;
				
				row5_HashRow.total_energie_soutiree_wh = row5.total_energie_soutiree_wh;
				
				row5_HashRow.courbe_moyenne_ndeg1_ndeg2_wh = row5.courbe_moyenne_ndeg1_ndeg2_wh;
				
				row5_HashRow.courbe_moyenne_ndeg1_wh = row5.courbe_moyenne_ndeg1_wh;
				
				row5_HashRow.courbe_moyenne_ndeg2_wh = row5.courbe_moyenne_ndeg2_wh;
				
			tHash_Lookup_row5.put(row5_HashRow);
			
            




 


	tos_count_tAdvancedHash_row5++;

/**
 * [tAdvancedHash_row5 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tConvertType_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	

 



/**
 * [tConvertType_1 process_data_end ] stop
 */



	
	/**
	 * [tReplace_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplace_1";

	

 



/**
 * [tReplace_1 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "mongo_out"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputJSON_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

 



/**
 * [tFileInputJSON_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputJSON_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

	}
	globalMap.put("tFileInputJSON_1_NB_LINE",nb_line_tFileInputJSON_1);
 

ok_Hash.put("tFileInputJSON_1", true);
end_Hash.put("tFileInputJSON_1", System.currentTimeMillis());




/**
 * [tFileInputJSON_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"mongo_out");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tReplace_1 end ] start
	 */

	

	
	
	currentComponent="tReplace_1";

	


globalMap.put("tReplace_1_NB_LINE",nb_line_tReplace_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tReplace_1", true);
end_Hash.put("tReplace_1", System.currentTimeMillis());




/**
 * [tReplace_1 end ] stop
 */

	
	/**
	 * [tConvertType_1 end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	
      globalMap.put("tConvertType_1_NB_LINE", nb_line_tConvertType_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tConvertType_1", true);
end_Hash.put("tConvertType_1", System.currentTimeMillis());




/**
 * [tConvertType_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

tHash_Lookup_row5.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row5", true);
end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());




/**
 * [tAdvancedHash_row5 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputJSON_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

 



/**
 * [tFileInputJSON_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tReplace_1 finally ] start
	 */

	

	
	
	currentComponent="tReplace_1";

	

 



/**
 * [tReplace_1 finally ] stop
 */

	
	/**
	 * [tConvertType_1 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	

 



/**
 * [tConvertType_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputJSON_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Job_merge_enedis_v2 Job_merge_enedis_v2Class = new Job_merge_enedis_v2();

        int exitCode = Job_merge_enedis_v2Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Job_merge_enedis_v2.class.getClassLoader().getResourceAsStream("local_project/job_merge_enedis_v2_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Job_merge_enedis_v2.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tMongoDBConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tMongoDBConnection_1) {
globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", -1);

e_tMongoDBConnection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Job_merge_enedis_v2");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     269988 characters generated by Talend Open Studio for Big Data 
 *     on the 18 octobre 2020 à 16:08:13 CEST
 ************************************************************************************************/